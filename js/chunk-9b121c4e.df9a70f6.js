(window.webpackJsonp=window.webpackJsonp||[]).push([["chunk-9b121c4e"],{"0b17":function(n,e,a){"use strict";var t={DocNavHTML:[{name:"基本<base>",answer:'\n    作用：描述文档中所有链接的默认链接\n    理解：base制定了一个URL地址 接下来调用的文件或图片等就无须再填写完整的地址\n         只需写上该文件名或图片名即可\n    head标签内\n    例：<base href="http://www.runoob.com/images/" target="_blank">\n    ',tags:[{name:"基础",color:"blue"}]},{name:"基本<link>",answer:'\n    作用：定义了文档与外部资源之间的关系 通常用于连接到样式表\n    例：<link rel="stylesheet" type="text/css" href="mystyle.css">\n    ',tags:[{name:"基础",color:"blue"}]},{name:"基本<img>",answer:'\n    <img src="图片地址" alt="下载失败时的替换文本" title = "提示文本">\n    alt属性：指定图像的描述性文本，当图像不可见时（下载不成功时），可看到该属性指定的文本\n    title属性：提供在图像可见时对图像的描述(鼠标滑过图片时显示的文本)\n    ',tags:[{name:"基础",color:"blue"}]},{name:"基本表格<table>",answer:'\n    <table border="1">\n      <tr>\n        <th>Header 1</th>\n        <th>Header 2</th>\n      </tr>\n      <tr>\n        <td>row 1, cell 1</td>\n        <td>row 1, cell 2</td>\n      </tr>\n      <tr>\n        <td>row 2, cell 1</td>\n        <td>row 2, cell 2</td>\n      </tr>\n    </table>    \n    ',tags:[{name:"基础",color:"blue"}]},{name:"基本<a>",answer:'\n    <a href="目标网址" title="鼠标滑过显示的文本">链接显示的文本</a>\n    ',tags:[{name:"基础",color:"blue"}]},{name:"基本无序列表<ul>",answer:"\n    <ul>\n      <li>列表信息1</li>\n      <li>列表信息2</li>\n    </ul>\n    ",tags:[{name:"基础",color:"blue"}]},{name:"基本有序列表<ol>",answer:"\n    <ol>\n      <li>列表信息1</li>\n      <li>列表信息2</li>\n    </ol>\n    ",tags:[{name:"基础",color:"blue"}]},{name:"在新窗口打开链接",answer:'\n    <a href="http://www.runoob.com/" target="_blank">访问菜鸟教程!</a>\n    注意：地址前面必须加http://  否则打不开\n    ',tags:[{name:"基础",color:"blue"},{name:"功能",color:"orange"}]},{name:"<p>标签内嵌套链接<a>",answer:'\n    <p>A link to my <a href="https://www.baidu.com/" title="niupi">favorite website.</a></p>\n    ',tags:[{name:"基础",color:"blue"},{name:"功能",color:"orange"}]},{name:"常用实体引用字符",answer:"\n    <   &lt; \n    >   &gt;\n    \"   &quot;\n    '   &apos; \n    &   &amp;\n\n    例：In HTML, you define a paragraph using the <p> element.\n    <p>In HTML, you define a paragraph using the &lt;p&gt; element.</p>\n    ",tags:[{name:"基础",color:"blue"}]},{name:"基本sessionStorage",answer:"\n    设置变量：sessionStorage.setItem('变量名', 值)\n    获取变量：sessionStorage.getItem('变量名')\n    清空：sessionStorage.clear()\n    ",tags:[{name:"基础",color:"blue"}]},{name:"基本localStorage",answer:"\n    设置变量：localStorage.setItem('变量名', 值)\n    获取变量：localStorage.getItem('变量名')\n    清空：localStorage.clear()\n    ",tags:[{name:"基础",color:"blue"}]},{name:"修改页面title",answer:"\n    document.title = 'xx'\n    ",tags:[{name:"基础",color:"blue"},{name:"功能",color:"orange"}]},{name:"获取/替换当前url",answer:"\n    获取：window.location.href\n    替换：window.location.href = xx\n    ",tags:[{name:"基础",color:"blue"}]},{name:"如何使得导航与内容关联",answer:'\n    <a href="#盒子id">菜单选项名1</a>\n    <div id="盒子id"></div>\n    ',tags:[{name:"进阶",color:"purple"}]},{name:"取消谷歌自动翻译",answer:'\n    在index.html种删除 <html lang="en">\n    ',tags:[{name:"进阶",color:"purple"}]},{name:"基本<video>",answer:'\n    <video\n      width="346px"\n      height="200px"\n      src="../../assets/monitorV.mp4"\n      autoplay    //自动播放\n      type="video/mp4"\n      muted="muted"    //静音属性\n      loop    //重复播放\n      controls    //显示控件\n    >\n    </video>\n    ',tags:[{name:"基础",color:"blue"}]}],DocNavCss:[{name:"css缩放",answer:"\n    transform: scale(x, y);\n    x： x轴缩放倍数\n    y： y轴缩放倍数\n    ",tags:[{name:"基础",color:"blue"}]},{name:"隐藏原生按钮的边框和点击边框",answer:"\n    border: none;\n    outline: none;\n    ",tags:[{name:"功能",color:"orange"}]},{name:"选择器 container下的input和a",answer:"\n    .container > input,\n    .container > a {\n        ...\n    }\n    ",tags:[{name:"基础",color:"blue"}]},{name:"隐藏元素的方法（4种）",answer:"\n    ①display:none;\n    ②position:absolute;left:-99999px;（足够大）\n    ③visibility:hidden;\n    ④opacity:0;\n    ",tags:[{name:"基础",color:"blue"}]},{name:"vertical-align:center 意思是 不起作用的原因是",answer:"\n    把此元素放置在父元素的中部\n    必须给父元素设置行高\n    ",tags:[{name:"疑难杂症",color:"red"}]},{name:"垂直居中的方法（3种）",answer:"\n    ①子元素vertical-align + 父元素line-height=height\n    ②relative布局top:50% + translateY(-50%)\n    ③父元素flex布局align-items + justify-content center\n    ",tags:[{name:"基础",color:"blue"}]},{name:"给第5个以后的所有元素添加样式",answer:"\n    :nth-child(n + 6)\n    第n个以后 即第n+1个开始\n    ",tags:[{name:"基础",color:"blue"}]},{name:"CSS动画 animation属性配置 例子",answer:'\n    animation：动画名称 动画时间 运动曲线 何时开始 播放次数 是否反方向;\n\n    无缝滚动\n    <div class="scrollDiv"></div>\n    .scrollDiv {\n      animation: myMove 9s linear infinite;\n      &:hover {\n        animation-play-state: paused;  //鼠标hover暂停\n      }\n    }\n    @keyframes myMove {\n      0% {\n        transform: translateY(0);\n      }\n      100% {\n        transform: translateY(-350px);\n      }\n    }\n    ',tags:[{name:"基础",color:"blue"}]},{name:"响应式适配 为1400px以下分辨率的屏幕采用另一套样式",answer:"\n    @media screen and (max-width:1400px){\n      ...\n    }\n    ",tags:[{name:"进阶",color:"purple"}]},{name:"响应式适配 为1400px以下分辨率的屏幕采用另一套样式",answer:"\n    @media screen and (min-width:520px) and (max-width:800px){\n      ...\n    }\n    ",tags:[{name:"进阶",color:"purple"}]},{name:"CSS动画 animation 保持最后一个状态不循环",answer:"\n    .triAnimation {\n      animation: triMove 0.3s linear;\n      animation-fill-mode: forwards;  // 关键句\n    }\n    ",tags:[{name:"基础",color:"blue"}]},{name:"table内容垂直居中",answer:"\n    td {\n      vertical-align:middle;\n    }\n    ",tags:[{name:"基础",color:"blue"}]},{name:"flex布局flex属性详解",answer:"\n    例flex: 0 0 390px;\n    flex-grow, flex-shrink和flex-basis的简写\n    flex-grow: 属性定义子项宽度之和不足父元素宽度时，子项拉伸的比例，无需直接设置宽度\n    flex-shrink: 属性定义了项目的缩小比例，默认为1，即如果空间不足，该项目将缩小\n    flex-basis: 属性定义了在分配多余空间之前，项目占据的主轴空间它的默认值为auto\n    ",tags:[{name:"基础",color:"blue"}]},{name:"谷歌浏览器默认最小字体12px 解决办法",answer:"\n    ①文本元素块级化 设置字体大小为12px\n    ②transform: scale(缩小倍数);\n    ",tags:[{name:"功能",color:"orange"}]},{name:"css禁止选中文字",answer:"\n    -moz-user-select: none;\n    -o-user-select: none;\n    -khtml-user-select: none;\n    -webkit-user-select: none;\n    -ms-user-select: none;\n    user-select: none;\n    ",tags:[{name:"进阶",color:"blue"}]},{name:"谷歌浏览器记住密码改为透明",answer:"\n    input:-webkit-autofill\n    {\n      -webkit-text-fill-color: 所需颜色;\n      transition: background-color 5000s ease-in-out 0s;\n    }\n    ",tags:[{name:"进阶",color:"purple"}]},{name:"空字串匹配default 原生标签",answer:"\n    <p>姓名：</p>\n    <p></p>\n    p:empty::before {\n      content: '暂无';\n      color: gray;\n    }\n    ",tags:[{name:"进阶",color:"blue"}]},{name:"CSS三角",answer:'\n    .类名::after {\n      content: "";\n      display: block;\n      border: 16px solid transparent;\n      border-top-color: red;\n      position: absolute;\n    }\n    ',tags:[{name:"进阶",color:"purple"}]},{name:"CSS多背景图写法",answer:"\n    background: url('../../../../assets/bar1.png') left bottom no-repeat,\n    url('../../../../assets/bar2.png') 50% top no-repeat,\n    url('../../../../assets/bar1.png') 90% bottom no-repeat;\n\n    也可使用渐变色搭配图片\n    background: linear-gradient(135deg,rgba(32, 123, 143, 0.6) 0%,rgba(23, 99, 165, 0.6) 100%),\n    url('../assets/components/cornerLeft.svg') left bottom no-repeat,\n    url('../assets/components/cornerRight.svg') right bottom no-repeat;\n    ",tags:[{name:"进阶",color:"purple"}]},{name:"CSS隐藏多余文字为...",answer:"\n    white-space: nowrap;\n    text-overflow: ellipsis;\n    overflow: hidden;\n    ",tags:[{name:"基础",color:"blue"}]},{name:"表格固定宽度",answer:"\n    table-layout: fixed\n    ",tags:[{name:"基础",color:"blue"}]},{name:"CSS只允许横行或竖向出现滚动条",answer:"\n    overflow-x：hidden/scroll\n    overflow-y：hidden/scroll\n    ",tags:[{name:"基础",color:"blue"}]},{name:"CSS Chrome滚动条样式修改",answer:"\n    // Chrome滚动条样式修改\n    ::-webkit-scrollbar {  \n        width: 5px;  \n        height: 5px;  \n        background-color: #2599B1;  \n    }  \n    /*定义滚动条轨道 内阴影+圆角*/  \n    ::-webkit-scrollbar-track {  \n        -webkit-box-shadow: inset 0 0 6px rgba(0, 0, 0, 0.3);  \n        border-radius: 10px;  \n        background-color: #2599B1;  \n    }    \n    /*定义滑块 内阴影+圆角*/  \n    ::-webkit-scrollbar-thumb {  \n        border-radius: 10px;  \n        -webkit-box-shadow: inset 0 0 6px rgba(0, 0, 0, .3);  \n        background-color: #53BBE0;  \n    }  \n    /*滑块效果*/\n    ::-webkit-scrollbar-thumb:hover {\n      border-radius: 5px;\n      -webkit-box-shadow: inset 0 0 5px rgba(0, 0, 0, 0.2);\n    background: rgba(0, 0, 0, 0.4);\n    }\n    ::-webkit-scrollbar-corner {\n      -webkit-box-shadow: inset 0 0 6px rgba(0, 0, 0, 0.3);\n      background-color: #2599B1;\n    }\n    ",tags:[{name:"进阶",color:"purple"}]},{name:"保证图片固定宽高不变形",answer:"\n    img样式添加 object-fit: cover;\n    ",tags:[{name:"基础",color:"blue"}]},{name:"两个div嵌套时内层div设置margin不起作用 原因和解决办法",answer:"\n    原因：\n    当两个容器嵌套时\n    如果外层容器和内层容器之间没有别的元素\n    会把内层元素的margin-top作用于父元素\n    解决方案：\n    ①宽度100% + float浮动 \n    ②父元素padding\n    ③子元素padding\n    ",tags:[{name:"疑难杂症",color:"red"}]},{name:"flex布局最下面一排不满解决办法",answer:"\n    渲染空元素将位置占满并隐藏空元素\n    ",tags:[{name:"疑难杂症",color:"red"}]},{name:"Css绘制半圆",answer:"\n    // 上半圆\n    width: 100px;\n    height: 50px;\n    border-radius: 50px 50px 0 0;\n\n    // 左半圆\n    width: 50px;\n    height: 100px;\n    border-radius: 0 50px 50px 0;\n\n    // 下半圆\n    width: 100px;\n    height: 50px;\n    border-radius: 0 0px 50px 50px;\n\n    // 右半圆\n    width: 50px;\n    height: 100px;\n    border-radius: 50px 0 0 50px;\n\n    也可使用clip属性剪裁绝对定位元素\n    // 左半圆\n    position:absolute;\n    width: 100px;\n    height: 100px;\n    border-radius: 50px;\n    clip: rect(0px 50px 100px 0px);  /* 合法的形状值是：rect (top, right, bottom, left) */\n\n    // 右半圆\n    position:absolute;\n    width: 100px;\n    height: 100px;\n    border-radius: 50px;\n    clip: rect(0px 100px 100px 50px); \n    ",tags:[{name:"进阶",color:"purple"}]},{name:"修改原生input占位符颜色",answer:"\n    input::-webkit-input-placeholder {\n      color: 色值;\n    }\n    ",tags:[{name:"功能",color:"orange"}]},{name:"栅格系统特点",answer:"\n    会有自动的padding样式（为了创建列colum之间的间隔）\n    bootstrap将全局的font-size设置为14px\n    box-sizing初始为border-box\n    ",tags:[{name:"基础",color:"blue"}]},{name:"text-decoration属性值（6个）",answer:"\n    none：标准文本；\n    underline：定义文本下划线；\n    overline：定义文本上的一条线；\n    line-through：穿过文本的一条线；\n    blink：闪烁文本；\n    inherit：继承父元素的text-decoration属性\n    ",tags:[{name:"基础",color:"blue"}]},{name:"子选择器语法",answer:"\n    .类名 > 标签名{CSS样式代码}\n    ",tags:[{name:"基础",color:"blue"}]},{name:"CSS隐藏滚动条",answer:"\n    scrollbar-width: none; /* Firefox */\n    -ms-overflow-style: none; /* IE 10+ */\n    ::-webkit-scrollbar {\n      display: none; /* Chrome Safari */\n    }\n    ",tags:[{name:"进阶",color:"purple"}]},{name:"CSS height:100%问题",hasDetail:!0,component:"1、height百分百问题",answer:"\n    一个元素高度是否可以使用百分比显示，取决于其父级对象\n    #id的父级是body，而浏览器默认状态下，是没有给body一个高度属性的\n    因此当我们直接设置#id为height:100%时，不会产生任何效果\n    ",tags:[{name:"疑难杂症",color:"red"}]},{name:"CSS 渐变色",answer:"\n    左到右：\n    background: linear-gradient(to right, color1, color2);\n    ",tags:[{name:"基础",color:"blue"}]},{name:"CSS 选择某类下所有子元素",answer:"\n    > * {\n      ...\n    } \n\n    例子：\n    标题功能栏区域所有元素间隔5px\n    .menuBar {\n      width: 100%;\n      margin-bottom: 10px;\n      > * {\n        margin-right: 5px;\n      } \n    }\n    ",tags:[{name:"进阶",color:"purple"}]},{name:"flex布局让某个元素靠右显示",answer:"\n    方法一：\n    .item{\n      margin-left:auto;\n    }\n    方法二：\n    .item{\n      flex: 1;\n      text-align: right;\n    }\n    ",tags:[{name:"进阶",color:"purple"}]},{name:"flex布局换行",answer:"\n    flex-wrap属性定义，如果一条轴线排不下，如何换行\n    .box{\n      flex-wrap: nowrap | wrap | wrap-reverse;\n    }\n    wrap-reverse：换行，第一行在下方\n    ",tags:[{name:"基础",color:"blue"}]},{name:"CSS动画 动态控制 keyframe",answer:"\n    1、创建一个新 style 元素\n    let style = document.createElement('style')\n    style.setAttribute('type', 'text/css')\n    2、插入目标节点\n    document.getElementById('目标节点id').appendChild(style)\n    3、插入动画规则\n    style.sheet.insertRule(\n      '@keyframes myMove {\n        ...\n      }'\n    )\n    注意：如果单纯插入规则 需要在css中写好animation 否则无效\n        可用vue :style动态设置\n    ",tags:[{name:"进阶",color:"purple"}]},{name:"CSS动画 常用属性",answer:"\n    animation-play-state: paused | running; // 属性规定动画正在运行还是暂停\n    animation-duration: 2s; // 定义动画完成一个周期所需要的时间\n    ",tags:[{name:"基础",color:"blue"}]},{name:"一列布局",answer:'\n    块状元素不设置宽度，宽度默认是父元素宽度的100%\n    \n    <div class="header"></div>\n    <div class="content"></div>\n    <div class="footer"></div>\n\n    .header{ \n      margin:0 auto; \n      max-width: 960px; \n      height:100px;\n      background: pink;\n    } \n    .content{ \n      margin: 0 auto; \n      max-width: 960px; (不定宽将这里改小)\n      height: 400px;\n      background: paleturquoise;\n    } \n    .footer{ \n      margin: 0 auto; \n      max-width: 960px; \n      height: 100px; \n      background: pink;\n    }\n    ',hasDetail:!0,htmlUrl:"../../../../../static/cssHtml/2、一列布局.html",tags:[{name:"基础",color:"blue"}]},{name:"二列布局（左定宽 右自适应）",answer:'\n    <div class="container">\n      <div class="left"></div>\n      <div class="right"></div>\n    </div>\n\n    .container {\n      width: 100%;\n      height: 300px;\n    }\n    .left, .right {\n      height: 100%;\n    }\n\n    1、float + margin\n    .left {\n      width: 300px;\n      float: left;\n    } \n    .right {\n      margin-left: 300px;\n    }\n\n    2、float + BFC\n    .left {\n      width: 300px;\n      float: left;\n    } \n    .right {\n      overflow: hidden;\n    }\n\n    3、父相子绝\n    .container {\n      position: relative;\n    }\n    .left {\n      width: 300px;\n      position: absolute;\n      left: 0;\n    } \n    .right {\n      position: absolute;\n      left: 300px;\n      right: 0;\n    }\n\n    4、flex布局\n    .container {\n      display: flex;\n    }\n    .left {\n      width: 300px;\n    } \n    .right {\n      flex: 1;\n    }\n\n    5、table布局\n    .container {\n      display: table;\n    }\n    .left {\n      width: 300px;\n      display: table-cell;\n    } \n    .right {\n      display: table-cell;\n    }\n    ',hasDetail:!0,htmlUrl:"../../../../../static/cssHtml/3、二列布局（左定）.html",tags:[{name:"基础",color:"blue"}]},{name:"transition属性",answer:"\n    🌟\n    transition 属性是一个简写属性，用于设置四个过渡属性：\n    transition-property\n    transition-duration\n    transition-timing-function\n    transition-delay\n\n    🌟\n    transition: property duration timing-function delay;\n    default: all 0 ease 0\n\n    🌟\n    transition-property 属性规定应用过渡效果的 CSS 属性的名称\n    none\t没有属性会获得过渡效果\n    all\t所有属性都将获得过渡效果。\n    property\t定义应用过渡效果的 CSS 属性名称列表，列表以逗号分隔\n\n    🌟\n    transition-timing-function 属性规定过渡效果的速度曲线\n    该属性允许过渡效果随着时间来改变其速度\n    linear\t规定以相同速度开始至结束的过渡效果  匀速\n    ease\t规定慢速开始，然后变快，然后慢速结束的过渡效果  慢快慢\n    ease-in\t规定以慢速开始的过渡效果  慢中\n    ease-out\t规定以慢速结束的过渡效果  中慢\n    ease-in-out\t规定以慢速开始和结束的过渡效果 慢中慢\n\n    W3C尝试：\n    https://www.w3school.com.cn/tiy/t.asp?f=eg_css3_transition-timing-function3\n    ",tags:[{name:"基础",color:"blue"}]},{name:"CSS + Vue渐变色背景",answer:'\n    关键词：背景 渐变 CSS css Css\n    <template>\n      <div :style="{ backgroundImage: gradientColor }"/>\n    </template>\n\n    <script>\n      export default {\n        props/data: {\n          colors: {\n            type: Array\n          }\n        },\n        computed: {\n          gradientColor () {\n            const colorBottom = ‘color-stop(30%, ¥{this.colors[0]})‘\n            const colorTop = ‘to(¥{this.colors[1]})‘\n            return ‘-webkit-gradient(linear, left bottom, left top, ¥{colorBottom}, ¥{colorTop})‘\n          }\n        }\n      }\n    <\/script>\n\n    <style lang="scss">\n    .gradient_color {\n      🌟 绝对定位+宽高100%\n      position: absolute;\n      width: 100%;\n      height: 100%;\n    }\n    </style>\n    ',tags:[{name:"进阶",color:"purple"}]},{name:"颜色透明",answer:"transparent",tags:[{name:"基础",color:"blue"}]},{name:"深度选择器/deep/ 报错 Expected selector",answer:"\n    /deep/ 改用 ::v-deep\n\n    例：\n    iot-wxapp control.vue\n    \n    // 清空表单验证提示文字前置padding\n    ::v-deep .uni-error-message {\n      padding-left: 0 !important;\n    }\n    ",tags:[{name:"疑难杂症",color:"red"}]},{name:"骨架屏",answer:"\n    .skeleton {\n      background-color: #eee !important;\n      color: transparent !important;\n      padding: 0;\n      border-color: #eee !important;\n      border-radius: 10px;\n      pointer-events: none;\n      background: linear-gradient(\n        100deg,\n        rgba(255, 255, 255, 0) 40%,\n        rgba(255, 255, 255, .5) 50%,\n        rgba(255, 255, 255, 0) 60%,\n      ) #eee;\n      background-size: 200% 100%;\n      background-position-x: 120%;\n      animation: 1s loading ease-in-out infinite;\n      span {\n        color: transparent !important;\n      }\n    }\n\n    使用配合loading属性\n    接口开始请求loading为true\n    请求结束改为false\n    ",tags:[{name:"基础",color:"blue"}]}],DocNavJs:[{name:"字符串：判断是否包含某字符",answer:'\n    let str = "字符串abcdefg" \n    方法1:\n    if (str.indexOf("ab") !== -1) {\n      ...\n    }\n    方法2:\n    if (字符串.search(\'ab\') !== -1) {\n      ...\n    }\n    ',tags:[{name:"基础",color:"blue"}]},{name:"js保留两位小数",answer:"\n    value.toFixed(2)\n    ",tags:[{name:"基础",color:"blue"}]},{name:"字符串：删除最后一项",answer:"\n    substr(0, str.length - 1)\n    ",tags:[{name:"基础",color:"blue"}]},{name:"字符串：判断某个变量是不是字符串",answer:"\n    isNaN(parseFloat(str))\n    parseFloat字符串会返回NaN\n    isNaN函数可以判断该值是不是NaN\n    ",tags:[{name:"进阶",color:"purple"}]},{name:"字符串：判断字符串中有几个数字",answer:'\n    let numCount = str.replace(/D/g, "").length\n    ',tags:[{name:"基础",color:"blue"}]},{name:"字符串：判断字符串中某字符出现次数",answer:'\n    let symbolCount = str.split("-").length - 1\n    理解:split返回由分割子字符串形成的数组\n        如果有2个字符“-”则原字符串将被分为3个字串\n        即数量为字串数组length - 1\n    ',tags:[{name:"进阶",color:"purple"}]},{name:"字符串：在字符串中输入单双引号",answer:"\n    单引号: 使用双引号外括 \"''\"\n    双引号: 使用单引号外括 '\"\"'\n    ",tags:[{name:"基础",color:"blue"}]},{name:"数组：数组最后一项 length巧妙表达",answer:"\n    array[array.length]\n    ",tags:[{name:"基础",color:"blue"}]},{name:"对象：js判断空对象",answer:"\n    if (JSON.stringify(对象名) !== '{}')\n    ",tags:[{name:"基础",color:"blue"}]},{name:"对象：如何push对象",answer:"\n    先定义好对象 然后push对象名\n    let parkInfo = {\n      id: res.list[i].id,\n      name: res.list[i].name\n    };\n    this.parkIdList.push(parkInfo);\n    ",tags:[{name:"基础",color:"blue"}]},{name:"对象：中文对象解构（慎用）",answer:'\n    局限性：解构出来的顺序与原对象不同 若有顺序要求则需谨慎\n    objectDir(obj) {\n      var nameArr = Object.keys(obj) // 返回对象内属性名称数组\n      let arr = []\n      for (let i in obj) {\n        arr.push({\n          name: "",\n          value: obj[i]  // 对象结构才能成功赋值\n        })               // keyArr[i] = obj[i]得到的是键值对对象\n      }\n      return arr\n    }\n    ',tags:[{name:"进阶",color:"purple"}]},{name:"对象：属性添加",answer:"\n    Object.assign(对象名, { 属性名: value })\n    ",tags:[{name:"基础",color:"blue"}]},{name:"数组：取反",answer:"\n    数组名.reverse()\n    ",tags:[{name:"基础",color:"blue"}]},{name:"对象：合并对象",answer:"\n    Object.assign(target, ...sources)\n    ",tags:[{name:"基础",color:"blue"}]},{name:"数组：删除数组指定项",answer:"\n    arr.splice(index, 1)\n    index为索引 1为删除数量\n    ",tags:[{name:"基础",color:"blue"}]},{name:"对象：获取对象值的另一种表达",answer:"\n    对象名[属性名称]\n    引申：this[对象名].属性名\n    ",tags:[{name:"基础",color:"blue"}]},{name:"数组：回调排序",answer:"\n    let arr = []\n    arr.sort(function(val1, val2) {\n     return val1 - val2  // 升序\n     return val2 - val1  // 降序\n    })\n    arr.sort((val1, val2) => val1 - val2)  // 箭头函数 升序\n    arr.sort((val1, val2) => val2 - val1)  // 箭头函数 降序\n    tips:\n    arrayObject.sort(sortby)  // sortby为排序顺序 默认为字母升序\n    若val1 - val2 < 0 返回一个小于零的值 数组将按照升序排列\n    若val1 - val2 = 0 返回0\n    若val1 - val2 > 0 返回一个大于零的值 数组将按照降序排列\n    ",tags:[{name:"进阶",color:"purple"}]},{name:"对象：调用自己的属性",answer:"\n    const obj = {\n      name: '对象',\n      // 错误\n      house: this.name + '的house'\n      // 正确\n      get house() {\n        return this.name + '的house'\n      }\n    }\n    this在方法调用时才有指向性\n    错误例子的this指向全局\n    ",tags:[{name:"进阶",color:"purple"}]},{name:"抛出异常结构",answer:"\n    try {\n      ...\n    }\n    catch {\n      ...\n    }\n    ",tags:[{name:"基础",color:"blue"}]},{name:"从返回多余字段的api种抓取需要字段",answer:"\n    this.businessHonorList = res.map(item => {\n      return {\n        name: item.companyName,\n        content: item.content\n      }\n    })\n    ",tags:[{name:"技巧",color:"pink"}]},{name:"Switch语句",answer:"\n    switch(表达式) {\n      case n:\n        代码块\n        break;\n      case n:\n        代码块\n        break;\n      default:\n        默认代码块\n    } \n    ",tags:[{name:"基础",color:"blue"}]},{name:"基本定时器",answer:"\n    延时：\n    setTimeout(() => {\n      ...\n    }, 毫秒数)\n    重复：\n    setInterval(() => {\n      ...\n    }, 毫秒数)\n    ",tags:[{name:"基础",color:"blue"}]},{name:"原生js更改div背景",answer:'\n    <div id="Bg"></div> \n    图片路径 pic/pic1.png\n    document.getElementById("Bg").style.background = "url(pic/pic1.png)";\n    ',tags:[{name:"基础",color:"blue"}]},{name:"原生js根据类名获取元素的方法",answer:"\n    document.getElementsByClassName()\n    ",tags:[{name:"基础",color:"blue"}]},{name:"HTML 弹出输入框并获取其值",answer:'\n    let a = prompt("值是","") \n    第二个参数为输入内容\n    ',tags:[{name:"基础",color:"blue"}]},{name:"改变this指针值 console一直相同 坑",answer:"\n    在接口中不断对this.value赋处理过的值\n    因为指针指向 只会显示最后处理完成的\n    应创建临时变量进行调试\n    ",tags:[{name:"疑难杂症",color:"red"}]},{name:"数组：去重",answer:"\n    function unique (arr) {\n      return Array.from(new Set(arr))\n    }\n    ",tags:[{name:"基础",color:"blue"}]},{name:"Math.floor()",answer:"\n    返回小于或等于一个给定数字的最大整数\n    即向下取整\n\n    Math.floor( 45.95);  // 45 \n    Math.floor(-45.05);  // -46 \n    ",tags:[{name:"基础",color:"blue"}]},{name:"require变量 坑",answer:"\n    Critical dependency: the request of a dependency is an expression\n    涉及到webpack找到对应模块的解析问题\n    Webpack 在处理动态名称模块名的时候\n    会直接将 能识别的静态路径 或者 当前路径下的所有子文件 都作为模块处理\n    因此要在最前面加上静态路径名\n    如 require('./image/ + imageName)\n    ",tags:[{name:"疑难杂症",color:"red"}]},{name:"Js 获取当天日期 YYYY/MM/DD",answer:"\n    new Date().toLocaleDateString()\n    ",tags:[{name:"基础",color:"blue"}]},{name:"Js 获取两个日期之间相差的天数",answer:"\n    // 日期格式 YYYY/MM/DD\n    getDaysBetweenDays(date1, date2) {\n      let startDate = Date.parse(date1)\n      let endDate = Date.parse(date2)\n      let days = (endDate - startDate) / (1 * 24 * 60 * 60 * 1000)\n      return days\n    }\n    注意7月8号不能写成 2020/07/08\n    应该为 2020/7/8\n    ",tags:[{name:"进阶",color:"purple"}]},{name:"数组：如果数组中存在item 则返回元素在数组中的位置 否则返回 -1",answer:"\n    第一种：\n    function indexOf(arr, item){\n      return arr.indexOf(item);\n    }\n    第二种:(判断浏览器是否支持)\n    function indexOf(arr, item) {\n      if (Array.prototype.indexOf){\n        return arr.indexOf(item);\n      } else {\n        for (var i = 0; i < arr.length; i++) {\n          if (arr[i] === item){\n            return i;\n          }\n        }\n      }     \n      return -1;\n    }\n    坑：这里不能用forEach() 因为forEach()无法在所有元素都传递给调用的函数之前终止遍历 \n    ",tags:[{name:"进阶",color:"purple"}]},{name:"数组：求和",answer:"\n    第一种：（代码量最少）\n    function sum(arr) {\n      return arr.reduce((x, y) => x + y)\n    }\n    ",tags:[{name:"进阶",color:"purple"}]},{name:"数组：Array reduce()方法",answer:"\n    reduce 为数组中的每一个元素依次执行回调函数\n    不包括数组中被删除或从未被赋值的元素\n    接受四个参数：初始值（或者上一次回调函数的返回值），当前元素值，当前索引，调用 reduce 的数组\n\n    arr.reduce(callback,[initialValue])\n    callback （执行数组中每个值的函数，包含四个参数）\n\n    1、previousValue （上一次调用回调返回的值，或者是提供的初始值（initialValue））\n    2、currentValue （数组中当前被处理的元素）\n    3、index （当前元素在数组中的索引）\n    4、array （调用 reduce 的数组）\n\n    initialValue （作为第一次调用 callback 的第一个参数。）\n    ",tags:[{name:"进阶",color:"purple"}]},{name:"对象：属性求和",answer:"\n    var result = [\n      {\n        subject: 'math',\n        score: 10\n      },\n      {\n        subject: 'chinese',\n        score: 20\n      },\n      {\n        subject: 'english',\n        score: 30\n      }\n    ];\n  \n    let sum = result.reduce(function(prev, cur) {\n        return cur.score + prev.score;\n    }, 0);\n\n    (不一定正确)\n    return result.reduce((prev.score, cur.prev) => prev.score + cur.prev)\n\n    console.log(sum) // 60\n    ",tags:[{name:"进阶",color:"purple"}]},{name:"数组：Array filter()方法",count:2,answer:'\n    filter() 方法创建一个新的数组 新数组中的元素是通过检查指定数组中符合条件的所有元素\n    filter() 不会对空数组进行检测\n    filter() 不会改变原始数组\n\n    array.filter(function(currentValue,index,arr), thisValue)\n\n    例子\n    var ages = [32, 33, 16, 40];\n\n    function checkAdult(age) {\n      return age >= 18;\n    }\n\n    function myFunction() {\n      document.getElementById("demo").innerHTML = ages.filter(checkAdult);\n    }\n    ',tags:[{name:"进阶",color:"purple"}]},{name:"数组：移除数组arr中的所有值与item相等的元素",answer:"\n    结果返回新的数组\n    function remove(arr,item) {\n      return arr.filter(function(ele){\n        return ele != item;\n      })\n    }\n    在原数组上操作\n    function removeWithoutCopy(arr, item) {\n      for(var i = 0; i < arr.length; i++)\n      {\n        if(item == arr[i])\n        {\n          arr.splice(i,1);\n          i--;\n        }\n      }\n      return arr;\n    }\n    ",tags:[{name:"进阶",color:"purple"}]},{name:"数组：浅拷贝",answer:"\n    arr.slice(0)\n    ",tags:[{name:"进阶",color:"purple"}]},{name:"对象：深拷贝",count:2,answer:"\n    function cloneObject (obj) {\n      const newObj = JSON.stringify(obj)\n      return JSON.parse(newObj)\n    }\n    JSON.parse(JSON.stringify(objectToClone))\n    方法局限性：\n    仅在对象内部没有方法的时候才可行\n    ",tags:[{name:"进阶",color:"purple"}]},{name:"数组：获取最大/小值",answer:"\n    let max = Math.max.apply(null, array)\n    let min = Math.min.apply(null, array)\n    ",tags:[{name:"进阶",color:"purple"}]},{name:"简易防抖",hasDetail:!0,component:"1、防抖",answer:"\n    export function debounce(delay, targetFuntion, ...args) {\n      let timer\n      return function debounceFunc() {\n        const ctx = this\n        // 首次立即执行\n        if (timer === undefined) {\n          targetFuntion.apply(ctx, args)\n          timer = 'isApplyed'\n          return\n        }\n        clearTimeout(timer)\n        timer = setTimeout(() => {\n          targetFuntion.apply(ctx, args)\n        }, delay)\n      }\n    }\n    ",tags:[{name:"进阶",color:"purple"}]},{name:"简易节流",hasDetail:!0,component:"2、节流",answer:"\n    function debounce(fn, delay) {\n      let timer = null\n      return function() {\n        if (timer) {\n          clearTimeout(timer)\n        }\n        timer = setTimeout(fn, delay)\n      }\n    }\n    ",tags:[{name:"进阶",color:"purple"}]},{name:"对象：抓取对象属性定义简写",hasDetail:!0,component:"3、抓取对象属性定义",answer:"\n    testObj: {\n      name: 'zcb',\n      age: '23',\n      video: '斗罗大陆',\n      favorite: '唐三'\n    }\n\n    getInfo(obj) {\n      const { video, favorite } = obj\n      this.info1 = video\n      this.info2 = favorite\n    }\n    ",tags:[{name:"进阶",color:"purple"}]},{name:"Critical dependency: the request of a dependency is an expression",answer:"\n    require接收变量会报该错\n    接收写死的字符串值时没有警告\n    require中带变量可使用模版字符串 或\n    \"../../images/\" + value + 'xx.jpg'\n    ",tags:[{name:"疑难杂症",color:"red"}]},{name:"对象/数组：对象数组排序",count:2,answer:"\n    /**\n     * 核心方法\n     * arr：目标数组 prop：排序的依据属性\n    */\n\n    taskSort(arr, prop) {\n      arr.sort((val1, val2) => val1[prop] - val2[prop])  // 升序\n      arr.sort((val1, val2) => val2[prop] - val1[prop])  // 降序\n    }\n\n    使用例：\n    taskSort(example1, 'name')\n    ",tags:[{name:"进阶",color:"purple"}]},{name:"字符串：删除后几位",answer:"\n    例如:去掉字符串后3位\n    let str = 'abcdefg'\n    let s1 = str.substring(0, str.length-3)\n    ",tags:[{name:"基础",color:"blue"}]},{name:"常用时间函数",answer:"\n    1.获取当前时间\n    var mydate=new Date();\n    result：Tue Oct 23 2018 10:02:30 GMT+0800 (中国标准时间)\n    \n    2.获取时间常用方法\n    mydate.getFullYear();  //获取完整的年份(4位,1970-???) result：2018\n    mydate.getMonth();  //获取当前月份(0-11,0代表1月) result：9\n    mydate.getDate();  //获取当前日(1-31) result：23\n    mydate.getDay();  //获取当前星期X(0-6,0代表星期天) result：2\n    mydate.getHours();  //获取当前小时数(0-23) result：10\n    mydate.getMinutes();  //获取当前分钟数(0-59) result：18\n    mydate.getSeconds();  //获取当前秒数(0-59) result：45\n    mydate.getTime(); //获取当前时间(从1970.1.1开始的毫秒数) result：1540261028601\n    mydate.toLocaleDateString();  //获取当前日期 result：2018/10/23\n    mydate.toLocaleTimeString();  //获取当前时间 result：上午10:13:26\n    mydate.toLocaleString();  //获取日期与时间 result：2018/10/23 上午10:14:21\n    ",tags:[{name:"基础",color:"blue"}]},{name:"数组：连接数组",answer:"\n    arr2 = arr2.concat(arr1)\n    ",tags:[{name:"基础",color:"blue"}]},{name:"数组：复制（深拷贝/浅拷贝）",answer:"\n    浅拷贝：\n    const arr2 = [...arr1]\n    深拷贝：\n    const arr2 = JSON.parse(JSON.stringify(arr1))\n    ",tags:[{name:"进阶",color:"purple"}]},{name:"map与forEach",answer:"\n    区别1：forEach无返回值 map有返回值\n    区别2：forEach改变原数组 map返回新数组\n\n    处理数组例：\n    let arr1 = [1, 2, 3]\n    let arr2 = [\n      {\n        name: '测试1'\n      },\n      {\n        name: '测试2'\n      },\n      {\n        name: '测试3'\n      },\n    ]\n\n    arr -> arr2\n    // forEach\n    arr1.forEach((item, index) => {\n      arr1[index] = { name: ’测试¥{item}‘ }\n    })\n    // map\n    let newArr = arr.map(item => {\n      return item = { name: ’测试¥{item}‘ }\n    })\n    ",hasDetail:!0,htmlUrl:"../../../../../static/jsHtml/1、map与forEach.html",tags:[{name:"基础",color:"blue"}]},{name:"原生js点击事件",answer:'\n    <body>\n      <button onclick="xxClick(a, b))"></button>\n      <button id="btn"></button>\n\n      <script>\n        // 方法1\n        function xxClick(a ,b) {\n          if (a) {\n            console.log(b)\n            ...\n          }\n        }\n        // 方法2 通过id\n        var btn = document.getElementById("btn")\n\n        // 直接赋值给属性\n        btn.onclick = function() {\n          alert("这是第一种点击方式")\n        }\n        // 注册事件监听器\n        btn.addEventListener(\'click\', function() {\n          alert("这是第二中点击方式");\n        })\n      <\/script>\n    </body>\n    ',tags:[{name:"基础",color:"blue"}]},{name:"正则表达式匹配",answer:'\n    let reg = /^((2(5[0-5]|[0-4]d))|[0-1]?d{1,2})(.((2(5[0-5]|[0-4]d))|[0-1]?d{1,2})){3}$/\n    if(!reg.test(val)) {\n      console.log("val值不匹配")\n    }\n    ',tags:[{name:"基础",color:"blue"}]},{name:"数组：splice()",answer:"\n    arr.splice(index,howmany,item1,.....,itemX)\n\n    index 必需。整数，规定添加/删除项目的位置，使用负数可从数组结尾处规定位置\n    howmany 必需。要删除的项目数量。如果设置为 0 则不会删除项目\n    item1, ..., itemX 可选。向数组添加的新项目\n    ",tags:[{name:"基础",color:"blue"}]},{name:"数组：splice遍历删除数组 坑",answer:"\n    // 以下代码会产生错误结果\n    xxList.map((item, index) => {\n      if (item.xx不满足条件) {\n        xxList.splice(index, 1)\n      }\n    })\n    原因是使用splice删除后数组长度会发生变化\n    这将导致先前遍历的索引对应错误不再有效\n\n    解决方案：\n    声明变量 deleteCount 记录splice()方法调用次数\n    声明变量 deleteList 记录需删除项索引\n    例：\n    let arr = [1, 1, 2, 3, 4, 1, 5]\n    let deleteList = []\n    // 记录索引\n    arr.forEach((item, index) => {\n      if (item === 1) {\n        deleteList.push(index)\n      }\n    })\n    // 执行删除\n    let count = 0\n    deleteList.forEach(item => {\n      arr.splice(item - count, 1)\n      count++\n    })\n    console.log(arr)\n    ",tags:[{name:"疑难杂症",color:"red"}]},{name:"基本Promise",answer:"\n    待补充通用实例\n    ",hasDetail:!0,htmlUrl:"../../../../../static/jsHtml/2、基本promise.html",tags:[{name:"基础",color:"blue"}]},{name:"async await",answer:"\n    待补充通用实例\n    ",hasDetail:!0,htmlUrl:"../../../../../static/jsHtml/3、async await.html",tags:[{name:"进阶",color:"purple"}]},{name:"统计代码行数",answer:"\n    command + shift + f 全局搜索\n    输入正则 ^b*[^:b#/]+.*$\n    选中搜索后的三个小图标\n\n    ❗️ 代码量过大可能不准确\n    参考博客：\n    https://blog.csdn.net/zhouzuoluo/article/details/103860851?utm_medium=distribute.pc_aggpage_search_result.none-task-blog-2~all~sobaiduend~default-1-103860851.nonecase&utm_term=vscode%20%E6%9F%A5%E7%9C%8B%E4%BB%A3%E7%A0%81%E6%80%BB%E8%A1%8C%E6%95%B0&spm=1000.2123.3001.4430\n    ",hasDetail:!0,htmlUrl:"https://blog.csdn.net/zhouzuoluo/article/details/103860851?utm_medium=distribute.pc_aggpage_search_result.none-task-blog-2~all~sobaiduend~default-1-103860851.nonecase&utm_term=vscode%20%E6%9F%A5%E7%9C%8B%E4%BB%A3%E7%A0%81%E6%80%BB%E8%A1%8C%E6%95%B0&spm=1000.2123.3001.4430",tags:[{name:"进阶",color:"purple"}]},{name:"生成id",answer:"\n    (Math.random() * 100).toString().replace('.', '')\n    ",tags:[{name:"进阶",color:"purple"}]},{name:"生成指定范围随机数",answer:"\n    createRandomNum(m, n) {\n      return parseInt(Math.random() * (n - m + 1) + m)\n    },\n\n    参考资料：\n    https://www.runoob.com/w3cnote/js-random.html\n    ",tags:[{name:"进阶",color:"purple"}]},{name:"清除定时器",answer:"\n    若要清除要将定时器挂在变量上\n    let obj = setTimeout(() => {\n      ...\n    }, time)\n    let obj = setInterval(() => {\n      ...\n    }, time)\n\n    clearTimeout(obj)\n    clearInterval(obj)\n    ",tags:[{name:"进阶",color:"purple"}]},{name:"对象：Object.assign()",answer:"\n    Object.assign方法用于对象的合并，将源对象（source）的所有可枚举属性，复制到目标对象\n    Object.assign方法的第一个参数是目标对象，后面的参数都是源对象\n\n    参考资料：\n    https://www.jianshu.com/p/d5f572dd3776\n    ",hasDetail:!0,htmlUrl:"https://www.jianshu.com/p/d5f572dd3776",tags:[{name:"进阶",color:"purple"}]},{name:"作用域与作用域链",answer:"\n    详见语雀文档\n    ",hasDetail:!0,htmlUrl:"https://www.yuque.com/zhanggeng-53fi4/af8383/ggilyl",tags:[{name:"进阶",color:"purple"}]},{name:"Promise.all和Promise.race",answer:"\n    Promise.all 使用例：\n    import { getInfo, getRoleList } from '@/api/permission/login'\n\n    Promise.all([getInfo(), getRoleList()]).then(res => {\n      const result = res[0] + res[1]\n      resolve(result)\n    }).catch(err => {\n      reject(err)\n    })\n    Promise.race类似 但只返回一个结果\n    ",hasDetail:!0,htmlUrl:"https://www.yuque.com/zhanggeng-53fi4/af8383/glqe0q",tags:[{name:"进阶",color:"purple"}]},{name:"数组：判断数组中是否含有某项",answer:"\n    if (arr.indexOf(val) !== -1) {\n      ...\n    }\n    ",tags:[{name:"基础",color:"blue"}]},{name:"字符串：大小写转换",answer:"\n    关键词：字母 字母大小写 转换\n    大写转小写 toLowerCase()\n    小写转大写 toUpperCase()\n    ",tags:[{name:"基础",color:"blue"}]},{name:"对象：删除属性",answer:"\n    关键词：删除对象属性\n    var obj = {\n      name: 'zhagnsan',\n      age: 19 \n    }\n    delete obj.name  // true\n    typeof obj.name  // undefined\n    ",tags:[{name:"基础",color:"blue"}]},{name:"数组：filter基本使用",answer:"\n    关键词：数组过滤 filter\n    目标数组 = 待遍历数组.filter(item => {\n      return item.属性 === xx\n    })\n    ",tags:[{name:"基础",color:"blue"}]},{name:"字符串：替换字符串中所有字符",answer:"\n    关键词：字符串替换 替换\n    例：a替换b\n    str2 = str1.replace(/a/g, 'b')\n    ",tags:[{name:"基础",color:"blue"}]},{name:"原型链基本继承",hasDetail:!0,htmlUrl:"../../../../../static/jsHtml/4、原型链基本继承.html",answer:"答案",tags:[{name:"进阶",color:"purple"}]},{name:"new操作符实现",hasDetail:!0,htmlUrl:"../../../../../static/jsHtml/5、new操作符实现.html",answer:"答案",tags:[{name:"进阶",color:"purple"}]},{name:"js判断奇偶",answer:"\n    value % 2 === 0 ? 偶数 : 奇数\n    ",tags:[{name:"基础",color:"blue"}]},{name:"find方法筛选目标",answer:"\n    find方法：返回符合条件的数组元素本身\n    即如果数组每一项是对象 则返回该对象\n\n    productFilter () {\n      return this.xxList.find(item => {\n        return item.id === 目标值\n      })['需要字段名']\n    }\n    ",tags:[{name:"基础",color:"blue"}]},{name:"字符串：返回字符串位置",answer:"str.indexOf('某字符')",tags:[{name:"基础",color:"blue"}]},{name:"对象：判断对象中是否含有某属性",answer:"if (属性 in 对象)",tags:[{name:"基础",color:"blue"}]},{name:"在子组件中修改父组件中的值：sync",answer:"\n    父组件：\n    <tabBar :pageName.sync=\"pageName\" />\n    子组件：\n    this.$emit('update:pageName', item.pageName)\n    ",tags:[{name:"基础",color:"blue"}]}],DocNavCanvas:[{key:"1",name:"什么是canvas",answer:"\n    <canvas>是一个可以使用脚本(通常为JavaScript)在其中绘制图形的 HTML 元素\n    ",tags:[{name:"基础",color:"blue"}]},{key:"2",name:"绘制矩形",answer:"\n    填充矩形：canvas.fillRect(x, y, width, height)\n    矩形边框：canvas.strokeRect(x, y, width, height)\n    ",tags:[{name:"基础",color:"blue"}]},{key:"3",name:"Canvas默认大小",answer:"\n    width: 300px;\n    height: 150px;\n    ",tags:[{name:"基础",color:"blue"}]},{key:"4",name:"Vue创建Canvas组件",answer:'\n    <template>\n      <div class="canvasDemo">\n        <canvas id="canvasDemo1"></canvas>\n        <p>矩形Demo</p>\n      </div>\n    </template>\n\n    export default {\n      mounted() {\n        this.draw1()\n      },\n      methods: {\n        draw1 () {\n         const canvasDom = document.getElementById(\'canvasDemo1\')\n         if (canvasDom.getContext) {\n           let canvas = canvasDom.getContext(\'2d\')\n              ...\n         }\n        } \n      }\n    }\n    <style lang="scss" scoped>\n    .canvasDemo {\n      #canvasDemo1 {\n        border: 1px solid #ccc;\n      }\n    }\n    </style>\n    ',tags:[{name:"基础",color:"blue"},{name:"功能",color:"orange"}]},{key:"5",name:"Canvas修改填充区域颜色",answer:"\n    canvas.fillStyle = color\n    ",tags:[{name:"基础",color:"blue"}]},{key:"6",name:"Canvas修改描边线条颜色",answer:"\n    canvas.strokeStyle = color\n    ",tags:[{name:"基础",color:"blue"}]},{key:"7",name:"Canvas修改描边线条宽度",answer:" \n    canvas.lineWidth = 10\n    单位px\n    ",tags:[{name:"基础",color:"blue"}]},{key:"8",name:"Canvas设置线条两头样式",answer:"\n    canvas.lineCap = 'butt'\n    butt 默认样式\n    square 方头 使用线条会变长 看起来和默认相同\n    round 圆头\n    ",tags:[{name:"基础",color:"blue"}]},{key:"9",name:"Canvas设置拐点样式",answer:"\n    canvas.lineJoin = 'miter'\n    miter 默认样式\n    bevel 会削掉尖头\n    round 圆头\n    ",tags:[{name:"基础",color:"blue"},{name:"功能",color:"orange"}]},{key:"10",name:"Canvas绘制基本路径",answer:"\n    canvas.beginPath()  // 代表新路径开始\n    canvas.moveTo(75, 15)  // 将笔触移动到指定点\n    canvas.lineTo(75, 15)  // 线起始点\n    canvas.lineTo(120, 15)  // 线目标点\n    canvas.lineTo(90, 25)  // 线目标点\n    canvas.closePath() // 闭合图形 自动补全\n    canvas.stroke()  // 描边\n    canvas.fill()  // 填充\n    ",tags:[{name:"基础",color:"blue"}]},{key:"11",name:"Canvas绘制虚线",answer:"\n    canvas.setLineDash([长度])  // 实线虚线部分一样长\n    canvas.setLineDash([实线长度, 虚线长度])  // 实线虚线部分不一样长\n    canvas.setLineDash([长度1, 长度2, 长度3])  // 按数值虚实交替\n\n    可通过canvas.getLineDash()获取虚线排列方式\n    可通过console.log()打印查看 值为一个数组\n    该数组为虚线不重复部分的值\n\n    可通过canvas.lineDashOffset = '长度'\n    设置虚线偏移量\n    正值往后偏移（横左 竖下）\n    负值往前偏移（横右 竖上）\n    ",tags:[{name:"基础",color:"blue"}]},{key:"12",name:"Canvas线帽样式不出现 坑",answer:"\n    不能加 canvas.closePath()\n    路径会自动闭合\n    ",tags:[{name:"疑难杂症",color:"red"}]},{key:"13",name:"Canvas虚线样式不出现 坑",answer:"\n    不能加 canvas.closePath()\n    路径会自动闭合\n    ",tags:[{name:"疑难杂症",color:"red"}]},{key:"14",name:"Canvas设置字体",answer:"\n    canvas.font = '14px \"微软雅黑\"'\n    ",tags:[{name:"基础",color:"blue"}]},{key:"15",name:"Canvas默认线条为1px 黑色 为什么看起来不像",answer:"\n    1px线条实质上从Canvas点坐标中心开始绘制\n    线条的宽度占据了上下1px空间的各一半\n    看起来像2px是因为实质占了2px像素位置\n    看起来为灰色是因为因为1px只占用了一半 不饱和导致颜色为灰\n    ",tags:[{name:"疑难杂症",color:"red"}]},{key:"16",name:"Canvas默认线条不饱和解决办法",answer:"\n    绘制线条时上移0.5px\n    ",tags:[{name:"疑难杂症",color:"red"}]},{key:"17",name:"自动闭合问题",answer:"\n    当线条宽度过大手动闭合无法完全重叠\n    使用 canvas.closePath() 方法可手动闭合\n    ",tags:[{name:"基础",color:"blue"}]},{key:"18",name:"获取画布宽高",answer:"\n    ①通过DOM\n    canvas的DOM.width  canvas的DOM.height\n    ②通过上下文来拿\n    canvas.canvas.width  canvas.canvas.height\n    ",tags:[{name:"基础",color:"blue"}]},{key:"19",name:"Canvas图像使用css设置宽高 坑",answer:"\n    css的宽高会拉伸画布致其变形\n    需在canvas元素中设置width height属性确定大小\n    ",tags:[{name:"疑难杂症",color:"red"}]},{key:"20",name:"基本方法-创建网格",answer:"\n    // 创建网格\n    export function createGrid(ctx, size, color) {\n      // 网格大小\n      const gridSize = size\n    \n      // 根据画布宽高和网格大小确定线条数\n      const canvasWidth = ctx.canvas.width\n      const canvasHeight = ctx.canvas.height\n      \n      let xLineNum = Math.floor(canvasHeight / gridSize)\n      let yLineNum = Math.floor(canvasWidth / gridSize)\n    \n      ctx.strokeStyle = color\n    \n      // 绘制x轴网格\n      for (let i = 0; i < xLineNum; i++) {\n        ctx.beginPath()\n        ctx.moveTo(0, i * gridSize - 0.5)\n        ctx.lineTo(canvasWidth, i * gridSize -0.5)\n        ctx.stroke()\n      }\n      // 绘制y轴网格\n      for (let i = 0; i < yLineNum; i++) {\n        ctx.beginPath()\n        ctx.moveTo(i * gridSize - 0.5 , 0)\n        ctx.lineTo(i * gridSize - 0.5, canvasHeight)\n        ctx.stroke()\n      }\n    }\n    ",tags:[{name:"基础",color:"blue"}]}],DocNavGit:[{key:"1",name:"撤销上一次commit",answer:"\n    git reset --soft HEAD^\n    ",tags:[{name:"基础",color:"blue"}]},{key:"2",name:"gitHub建立仓库步骤",answer:"\n    ①打开创建界面\n    ②输入仓库名称以及描述\n    ③选择公开或私人\n    ④选择添加README文件\n    ",tags:[{name:"基础",color:"blue"}]},{key:"3",name:"gitHub DeskTop如何导入本地仓库",answer:"\n    file → add local repository→choose\n    ",tags:[{name:"基础",color:"blue"}]},{key:"4",name:"gitHub上传本地项目 步骤",answer:'\n    ①进入项目文件夹→Git Bash Here\n    ②将git上的仓库克隆到本地\n      git clone 仓库链接\n    ③项目中会多出一个文件夹 名称是仓库名称\n    ④将项目中其它文件移入仓库文件夹中\n    ⑤进入仓库文件夹→Git Bash Here\n    ⑥输入指令git add .\n    ⑦输入指令git commit -m "提交信息"\n    ⑧输入指令git push -u origin master\n    ⑨输入gitHub账号密码\n    ',tags:[{name:"基础",color:"blue"}]},{key:"5",name:'指令"git add ."的意思是',answer:"\n    将当前目录下所有文件都添加进来\n    ",tags:[{name:"基础",color:"blue"}]},{key:"6",name:'指令"git push -u origin master"的意思是',answer:"\n    把本地仓库push到github上面\n    ",tags:[{name:"基础",color:"blue"}]},{key:"7",name:"git检测不到文件变化时怎么办",answer:"\n    先删除到回收站提交一次\n    还原后再提交一次\n    ",tags:[{name:"疑难杂症",color:"red"}]},{key:"8",name:"git切换分支",answer:"\n    git checkout 分支名\n    ",tags:[{name:"基础",color:"blue"}]},{key:"9",name:"git查看当前分支",answer:"\n    git status\n    ",tags:[{name:"基础",color:"blue"}]},{key:"10",name:"git拉取当前分支代码",answer:"\n    git pull origin 指定分支\n    ",tags:[{name:"基础",color:"blue"}]},{key:"11",name:"git提交到指定分支",answer:"\n    git add .\n    git commit -m '指定分支'\n    git push origin 指定分支\n    ",tags:[{name:"基础",color:"blue"}]},{key:"12",name:"git新建分支",answer:"\n    ①切换到基础（待拷贝）分支\n    ②git checkout -b 新分支名\n    ③更新分支代码并提交\n      git add *\n      git commit -m 'init 新分支名'\n      git push origin 新分支名\n    ",tags:[{name:"基础",color:"blue"}]},{key:"13",name:"git切换到指定commit",answer:"\n    git checkout commit编号\n    ",tags:[{name:"基础",color:"blue"}]},{key:"14",name:"git修改仓库名称",answer:"\n    进入仓库→Setting→Options→Rename\n    ",tags:[{name:"基础",color:"blue"}]},{key:"15",name:"git查看用户名",answer:"\n    git config user.name\n    ",tags:[{name:"基础",color:"blue"}]},{key:"16",name:"git查看邮箱",answer:"\n    git config user.email\n    ",tags:[{name:"基础",color:"blue"}]},{key:"17",name:"git修改用户名",answer:'\n    git config --global user.name  "xxxx"\n    ',tags:[{name:"基础",color:"blue"}]},{key:"18",name:"git修改邮箱",answer:'\n    git config --global user.email  "xxxx"\n    ',tags:[{name:"基础",color:"blue"}]},{key:"19",name:"Git: There is no tracking information for the current branch.",answer:"\n    产生原因：本地分支和远程分支没有建立关联\n    解决方案：给未关联的分支指定必要关联的远程分支\n            git branch --set-upstream-to=origin/远程分支名 本地分支名\n            通过 git branch -vv 确认是否关联成功\n            git branch -vv 命令用于查询本地分支和远程分支的关联关系\n    ",tags:[{name:"疑难杂症",color:"red"}]},{key:"20",name:"gitLab怎么删除仓库",answer:"\n    侧边栏settings -> general -> Advanced ->\n    若有权限则会出现 remove\n    ",tags:[{name:"基础",color:"blue"}]},{key:"21",name:"Vue项目上传dist文件夹",answer:"\n    .gitignore文件中\n    中删除 /dist\n    ",tags:[{name:"基础",color:"blue"}]},{key:"22",name:"Git: > running pre-commit hook: lint-staged",answer:"\n    大概是有一个钩子，提交前检查项目代码的规范，eslint的检查。\n    提交失败的原因：项目中error过多，导致检测未通过，提交失败。\n\n    解决办法：不进行检查 删除掉pre-commit hook\n    具体位置在项目文件夹 .githooks 目录下，找到文件pre-commit删除即可\n    ",tags:[{name:"疑难杂症",color:"red"}]},{key:"23",name:"Git合并到主分支",answer:"\n    切换到主分支\n    git merge 子分支名\n    ",tags:[{name:"基础",color:"blue"}]},{key:"24",name:"Git删除分支",answer:"\n    删除远程分支 git push origin --delete 分支名\n    删除本地分支 git branch -d 分支名\n    ",tags:[{name:"基础",color:"blue"}]},{key:"25",name:"Git在某条子分支基础上新建分支",answer:"\n    git branch newBranch  //新建本地分支\n    git checkout newBranch  //本地切换到自己的分支\n    git pull origin xxxxBranch  //从远程目标分支copy代码\n    git push origin newBranch //将本地新建的分支同步到服务器\n    git branch --set-upstream-to=origin/newbranch newbranch //本地分支和远程分支建立追踪\n    ",tags:[{name:"基础",color:"blue"}]},{key:"26",name:"Git修改分支名",answer:"\n    注意：如果新拉的代码需先切换到子分支获取本地子分支 否则第一步会报错\n    ① git branch -m old_branch new_branch  // 修改本地分支名称\n    ② git push origin :old_branch  // 删除远程分支\n    ③ git push origin new_branch  // 将本地新分支 push 到远程\n    ④ git branch --unset-upstream // 取消之前设置的 upstream\n    ⑤ git push --set-upstream origin new_branch //将新分支设为 upstream\n    ",tags:[{name:"基础",color:"blue"}]},{key:"27",name:"git删除tag",answer:"\n    git tag -d test_tag    //本地删除tag\n    git push origin :refs/tags/test_tag    //本地tag删除了，再执行该句，删除线上tag\n    ",tags:[{name:"基础",color:"blue"}]},{name:"gitHub更换默认分支",answer:"\n    1、进入仓库 -> settings -> 选择Branches\n    2、在Default下选择更换后的主分支 -> update\n    ",tags:[{name:"基础",color:"blue"}]},{name:"error: You have not concluded your merge (MERGE_HEAD exists).",answer:"\n    原因：在以前pull下来的代码自动合并失败\n    解决办法一:保留本地的更改,中止合并->重新合并->重新拉取\n      git merge --abort\n      git reset --merge\n      git pull\n    解决方案二：舍弃本地代码,远端版本覆盖本地版本(慎重)\n      git fetch --all\n      git reset --hard origin/master\n      git fetch\n    ",tags:[{name:"疑难杂症",color:"red"}]},{name:"git merge 其它仓库分支（companyMaster）",answer:"\n    1、在本地创建好待合并分支\n    2、将主仓库的地址添加到自己本地的远程仓库中\n      git remote add 仓库名称 地址\n      例：git remote add companyMaster git@github.weiwei.com:company/code.git\n      * 使用 git remote 检查本地的远程仓库\n    3、抓取仓库数据到本仓库中\n      git fetch 仓库名称\n      例：git fetch companyMaster\n    4、创建新分支branchNew\n      这一步是将远程主仓库的代码在本地新建一个分支，稍后会将这个分支的代码和本地代码merge\n      这样也就是将主仓库代码和自己仓库的代码merge了\n      git checkout -b branchNew companyMaster/其它仓库目标分支\n    5、切换到本地待合并分支\n      git checkout 待合并分支（操作之前创建好）\n    6、合并两个分支\n      git merge branchNew\n\n    若后续合并新的更新代码\n    直接 git fetch companyMaster\n    在新分支branchNew拉取fetch过来的更新\n    \n    参考资料：\n    http://www.mamicode.com/info-detail-2875588.html\n    ",tags:[{name:"进阶",color:"purple"}]},{name:"fatal: refusing to merge unrelated histories",answer:"\n    在操作命令后面加 --allow-unrelated-histories\n    ",hasDetail:!0,htmlUrl:"https://blog.csdn.net/wd2014610/article/details/80854807",tags:[{name:"疑难杂症",color:"red"}]},{name:"You are not allowed to push code to protected branches on this project.",answer:'\n    Project: "Settings" -> "Repository" -> "Protected branches"\n    Allowed to push\n    修改权限\n    ',hasDetail:!0,htmlUrl:"https://blog.csdn.net/zzh920625/article/details/78087669",tags:[{name:"疑难杂症",color:"red"}]},{name:"running pre-commit hook: npm run precommit",answer:"\n    进入.git文件夹 删除hooks\n    ",hasDetail:!0,htmlUrl:"https://blog.csdn.net/m0_46442996/article/details/109688714",tags:[{name:"疑难杂症",color:"red"}]},{name:"Failed to connect to github.com port 443: Operation timed out",answer:"\n    第一步：打开ipaddress.com,查询如下两个域名，并分别记录下其对应的ip：\n    1、github.com\n    2、github.global.ssl.fastly.net\n\n    第二步：更新host文件\n    192.30.253.112 github.com\n    151.101.185.194 github.global.ssl.fastly.net\n    ",hasDetail:!0,htmlUrl:"https://blog.csdn.net/natahew/article/details/81387885",tags:[{name:"疑难杂症",color:"red"}]},{name:"gitHub删除仓库",answer:"\n    进入待删除仓库 -> settings\n    下拉找到 Danger Zone -> Delete this repository\n    ",hasDetail:!0,htmlUrl:"https://jingyan.baidu.com/article/a378c960f8bae8b3282830f1.html",tags:[{name:"基础",color:"blue"}]}],DocNavWebpack:[{name:"查看全局依赖目录",answer:"\n    npm root -g\n    \n    mac目录 返回桌面 command + shift + g\n    /usr/local/lib/node_modules\n    ",tags:[{name:"基础",color:"blue"}]}],DocNavVue:[{name:"根据布尔值动态更换选择器",answer:'\n    :class="{样式类1:布尔值1,样式类2:布尔值2}"\n    ',tags:[{name:"基础",color:"blue"}]},{name:"动态设置div背景",answer:"\n    :style=\"{backgroundImage: 'url('+ screenBg +')'}\"\n    data () {\n      return {  \n        screenBg: require('./assets/images/map.png')\n      }\n    ",tags:[{name:"基础",color:"blue"}]},{name:":class绑定单个class",answer:"\n    :class=\"{'样式名称': 布尔值}\"\n    ",tags:[{name:"基础",color:"blue"}]},{name:"三目运算符控制class",answer:"\n    :class=\"条件 ? '样式1' : '样式2'\"\n    注意点：两个样式一定要加单引号\n    ",tags:[{name:"基础",color:"blue"}]},{name:"div滚动 滚动条置底",answer:'\n    <div ref="scrollArea"></div>\n    setTimeout(() => {\n      this.$refs.scrollArea.scrollTop = this.$refs.scrollArea.scrollHeight\n    })\n    ',tags:[{name:"进阶",color:"purple"}]},{name:"路由：vue watch 监听路由",answer:'\n    watch: {\n      "$route.path": function(newVal, oldVal) {\n        if (newVal !== oldVal) {\n          ...\n        }\n      }\n    }\n    ',tags:[{name:"基础",color:"blue"}]},{name:"Vue3.0使用自定义字体方法",answer:"\n    ①将字体文件（如.ttf)放入assets文件夹\n    ②在style→common.less(scss)中定义字体\n      @font-face {\n      font-family: number;\n      src: url(../assets/number.ttf);\n    }\n    ",tags:[{name:"基础",color:"blue"}]},{name:"Vue自定义组件",answer:'\n    1、在需要引用组件A的地方（如组件B）import 组件 form "@/componetns/组件"\n    2、在组件B中的components中注册\n      components: {\n        组件\n      }\n    3、在组件A中定义props规定使用组件传递的参数\n      props: {\n        name: String,\n        age: Number\n      }\n    4、组件B div中\n      <div>\n        <组件 name="姓名" age="22">\n      </div>\n      其中动态属性需要加：(冒号)\n    ',tags:[{name:"基础",color:"blue"}]},{name:"鼠标进入离开事件",answer:'\n    @monseenter="事件名"\n    @monseleave="事件名"\n    ',tags:[{name:"基础",color:"blue"}]},{name:"watch 刷新echarts",answer:"\n    在点击事件函数中先给图表赋新值 后改变index \n    使用watch监听tab index\n    chartNavIndex: function(newVal, oldVal) {\n      if (newVal !== oldVal) {\n        this.isLoaded = false\n        this.$nextTick(() => {\n          this.isLoaded = true\n        })\n      }\n    }\n    ",tags:[{name:"进阶",color:"purple"}]},{name:"vue动态控制链接跳转（有地址跳转没有则停止）",answer:"\n    <a :href=\"条件 ? ‘http://¥{变量地址}‘ : 'javascript:void(0)'\"></a>\n    ",tags:[{name:"进阶",color:"purple"}]},{name:"Vue子传父",answer:'\n    子组件（事件触发）：this.$emit("dataReturn", 数据1, 数据2)\n    父组件：\n    ①<myComponent @dataReturn="dataReturn"></myComponent>\n    ②methods中定义方法 \n      dataReturn(数据1, 数据2) {\n        //相关处理 例：this.xxList = 数据1\n      }\n    ',tags:[{name:"基础",color:"blue"}]},{name:"Vue获取div宽度",answer:'\n    <div ref="widthTest"></div>\n    console.log(this.$ref.widthTest.clientWidth)\n    注意：如果不出来需打印出来一步一步查看\n    ',tags:[{name:"基础",color:"blue"}]},{name:"Vue导航守卫 全局登录",answer:"\n    注意：\n    beforeEach钩子中必须有next()语句才会执行 若不写则会一直卡住\n    若卡住默认加载App.vue\n    router.beforeEach((to, from, next) => {\n      if (to.fullPath === \"/login\"){\n        next()\n      } else {\n        let token = sessionStorage.getItem('token')\n        if (token) {\n          next()\n        } else {\n          next({ path: '/login' })\n        }\n      }\n    })\n    ",tags:[{name:"进阶",color:"purple"}]},{name:"Vue import文件名坑（import Base64）",answer:"\n    import Base64 from '@/utils/base64' 会报错\n    将base64.js修改为全英文文件名后解决\n    ",tags:[{name:"疑难杂症",color:"red"}]},{name:"Vue 键盘事件（回车）",answer:'\n    在输入框上添加 @keyup.enter="search(keyWords)"\n    <a-input\n      class="input"\n      placeholder="Enter keyWords"\n      v-model="keyWords"\n      @keyup.enter="方法名"\n    />\n    ',tags:[{name:"基础",color:"blue"}]},{name:"路由：Vue创建路由",answer:"\n    1、如果使用模块化机制编程，导入Vue和VueRouter，要调用 Vue.use(VueRouter)\n    import Vue from 'vue'\n    import Router from 'vue-router'\n    2、定义（引入）路由组件\n    const Foo = { template: '<div>foo</div>' }\n    const Home = () => import( '@/pages/home/index.vue')\n    3、定义路由\n    const routes = [\n      { path: '/foo', component: Foo },\n      { path: '/Home', component: Home }\n    ] \n    4、创建 router 实例，然后传 routes 配置\n    const router = new VueRouter({\n      routes // (缩写) 相当于 routes: routes\n    })\n    5、创建和挂载根实例\n    App.vue中\n    export default {\n      router\n    }\n    ",tags:[{name:"基础",color:"blue"}]},{name:"路由：Vue动态路由",answer:"\n    例：有一个 User 组件，对于所有 ID 各不相同的用户，都要使用这个组件来渲染\n    此类情况可使用动态路由\n    在 vue-router 的路由路径中使用“动态路径参数”(dynamic segment) 来达到这个效果\n    routes: [\n        // 动态路径参数 以冒号开头\n        { path: '/user/:id', component: User }\n      ]\n    一个“路径参数”使用冒号 : 标记。\n    当匹配到一个路由时，参数值会被设置到 this.$route.params，可以在每个组件内使用。\n    于是，我们可以更新 User 的模板，输出当前用户的 ID\n    const User = {\n      template: '<div>User {{ $route.params.id }}</div>'\n    }\n    ",tags:[{name:"基础",color:"blue"}]},{name:"将对象转化为url形式传给后端",answer:"\n    需要Qs模块\n    cnpm install qs\n    import Qs from 'qs'\n    data对象 = Qs.stringify(data对象)\n    ",tags:[{name:"基础",color:"blue"}]},{name:"浏览器FormData和Request Payload",answer:'\n    FormData和Payload是浏览器传输给接口的两种格式\n    浏览器是通过Content-Type来进行区分\n    Formdata方式："Content-Type": "application/x-www-form-urlencoded"\n    Request Payload方式："Content-Type": "application/json或multipart/form-data"\n    ',tags:[{name:"疑难杂症",color:"red"}]},{name:"Vue 兄弟组件传值 EventBus",answer:'\n    新建eventBus.js文件\n    // event-bus.js\n    import Vue from \'vue\'\n    export const EventBus = new Vue()\n\n    组件A ➡️ B\n    组件A：\n    import { EventBus } from "@/utils/eventBus"\n    click() {\n      EventBus.$emit("参数名", 参数)\n    }\n\n    组件B：\n    import { EventBus } from "@/utils/eventBus"\n    在created钩子中接收\n    created() {\n      EventBus.$on("参数名", (形参) => {\n        ...\n      })\n    }\n    ',tags:[{name:"进阶",color:"purple"}]},{name:"路由：路由参数复用组件不刷新解决办法",answer:"\n    当使用路由参数时，例如从 /user/foo 导航到 /user/bar，原来的组件实例会被复用\n    因为两个路由都渲染同个组件，比起销毁再创建，复用则显得更加高效\n    不过，这也意味着组件的生命周期钩子不会再被调用\n    复用组件时，想对路由参数的变化作出响应的话，你可以\n    ①监听路由\n      watch: {\n        $route(to, from) {\n          // 对路由变化作出响应...\n        }\n    ②使用导航守卫\n      beforeRouteUpdate (to, from, next) {\n        // react to route changes...\n        // don't forget to call next()\n      }\n    ",tags:[{name:"疑难杂症",color:"red"}]},{name:"路由：Vue动态路由-多段路径参数",answer:"\n    模式：/user/:username/post/:post_id\n    实例路径：/user/evan/post/123\n    $route.params：{ username: 'evan', post_id: '123' }\n    ",tags:[{name:"基础",color:"blue"}]},{name:"提供path params被忽略 坑",answer:"\n    如果提供了 path，params 会被忽略\n    const userId = '123'\n    ①提供路由的 name \n    router.push({ name: 'user', params: { userId }}) // -> /user/123\n    ②手写完整的带有参数的 path\n    router.push({ path: ‘/user/¥{userId}’ }) // -> /user/123\n    // 这里的 params 不生效\n    router.push({ path: '/user', params: { userId }}) // -> /user\n    ",tags:[{name:"疑难杂症",color:"red"}]},{name:"鼠标点击其它区域关闭",answer:"\n    document.addEventListener('click', e => {\n      if(!this.$el.contains(e.target)) {\n        this.isOpen = false\n      }\n    })\n    ",tags:[{name:"进阶",color:"purple"}]},{name:"路由：<router-link> 例 已入驻",answer:'\n    <router-link \n      tag="li"\n      class="build-item"\n      active-class="active"\n      to="/businessManage/entered">\n        已入驻\n    </router-link>\n    ',tags:[{name:"基础",color:"blue"}]},{name:"路由：router-link不起作用 坑",answer:'\n    检查to参数后的路径是否开头少了/\n    to="/xx/xxx/xxxx"  正确\n    to="xx/xxx/xxxx"  错误\n    ',tags:[{name:"疑难杂症",color:"red"}]},{name:"路由：路由懒加载等价式",answer:"\n    component: function () {\n      return import('../views/index')\n    }\n    ",tags:[{name:"基础",color:"blue"}]},{name:"路由：组件懒加载写法",answer:"\n    components下 pages下 Login.vue\n    component: () => import('../components/pages/login')\n    ",tags:[{name:"疑难杂症",color:"red"}]},{name:"路由：如何点击路由刷新当前组件",answer:"\n    使用this.$router.go(0)\n    ",tags:[{name:"基础",color:"blue"}]},{name:"路由：隐藏路径传递参数",answer:'\n    使用 name + params\n    ①this.$router.push({\n        name: "路由名",\n        params: {\n          参数名: 参数\n        }\n      })\n    ②index.js中\n      {\n        path: ...,\n        name: "路由名",\n        ...\n      }\n\n    弊端：页面刷新后params会消失\n    ',tags:[{name:"基础",color:"blue"}]},{name:"路由：替换当前路由",answer:'\n    router.replace("路径")\n    ',tags:[{name:"基础",color:"blue"}]},{name:"路由：配置解构写法",answer:"\n    index.js\n    import Home from './home'\n    ...其它模块\n    const routes = [...Home, ...其它模块]\n    ",tags:[{name:"基础",color:"blue"}]},{name:"路由：跳转在页面底部解决办法",answer:"\n    new Router({\n      routes: [],\n      scrollBehavior(to, from,savedPosition){\n        return { x: 0, y: 0 }\n      }\n    })\n    ",tags:[{name:"基础",color:"blue"}]},{name:"路由：redirect",answer:"\n    {\n      path: '/businessManage',\n      name: '企业管理-入园企业信息',\n      redirect: '/businessManage/entered',\n      component: compLazyload('businessManage/index'),\n      children: [\n        {\n          path: 'entered',\n          component:    \n          compLazyload('businessManage/entered')\n        },\n        {\n          path: 'backIn',\n          component:   \n          compLazyload('businessManage/backIn')\n        }\n      ]\n    }\n    ",tags:[{name:"基础",color:"blue"}]},{name:"路由：阻止路由点击多次报错",answer:"\n    index.js中\n    const originalPush = Router.prototype.push\n    Router.prototype.push = function push(location) {\n      return originalPush.call(this, location).catch(err => err)\n    }\n    ",tags:[{name:"疑难杂症",color:"red"}]},{name:"路由：配置好路由后页面刷不出来的原因可能有（3点）",answer:"\n    ①两个位置的path是否更改\n    ②更改的文件是否全部保存\n    ③路由拼写是否有错\n    ",tags:[{name:"疑难杂症",color:"red"}]},{name:"Vue项目 怎么取消谷歌自动翻译",answer:'\n    在index.html中删除 <html lang="en">\n    ',tags:[{name:"基础",color:"blue"}]},{name:"路由：click直接写router",answer:'\n    <Button @click="$router.go(-1)">返回</Button>\n    ',tags:[{name:"基础",color:"blue"}]},{name:"Vue失焦事件",answer:'\n    @on-blur="事件名"\n    ',tags:[{name:"基础",color:"blue"}]},{name:"接口全局路径配置",answer:"\n    config.js\n    export const config = {\n      xxUrl: '/park-invest,\n        ...\n    }\n    接口js\n    import { config } from './config'\n    export const xxapi = p => get(‘¥{config.xxUrl}/xx/xxx’, p)\n    ",tags:[{name:"基础",color:"blue"}]},{name:"Vue MP4视频显示不出来解决办法",answer:"\n    使用格式工厂用H264格式输出\n    ",tags:[{name:"疑难杂症",color:"red"}]},{name:"Vue项目中使用Js控制视频播放",answer:"\n    给video标签加上ref='video'\n    在this.$refs中获取该video标签\n    使用video.play()方法播放视频\n    ",tags:[{name:"基础",color:"blue"}]},{name:"Vue项目中使用Js控制视频播放",answer:"\n    给video标签加上ref='video'\n    在this.$refs中获取该video标签\n    使用video.play()方法播放视频\n    使用video.pause()方法暂停视频\n    ",tags:[{name:"基础",color:"blue"}]},{name:"Vue数字循环",answer:'\n    v-for="count in 10"\n    :key="count"\n    ',tags:[{name:"基础",color:"blue"}]},{name:"Vue接口地址",answer:"\n    Cli2.0 -> config→index.js\n    Cli3.0 -> vue.config.js→devServer\n    ",tags:[{name:"基础",color:"blue"}]},{name:"子组件默认参数",answer:'\n    title: {\n      type: String,\n      default: "-"\n    },\n    ',tags:[{name:"基础",color:"blue"}]},{name:"Vue set给对象添加属性",answer:'\n    this.$set(对象名, "属性名", 属性值)\n    ',tags:[{name:"基础",color:"blue"}]},{name:"ref父子组件实例（雅戈尔项目）",answer:'\n    //父组件\n    <div class="home">\n      <module1 ref="module1"></module1>  //子组件\n    </div>\n    methods:{\n      this.$refs.module1.setData()  //调用子组件中的方法\n    }\n    ',tags:[{name:"基础",color:"blue"}]},{name:"ref理解与使用",answer:"\n    ref 用来给元素或子组件注册引用信息\n    引用信息将会注册在父组件的 $refs 对象上：\n    如果在普通的 DOM 元素上使用，引用指向的就是 DOM 元素\n    如果用在子组件上，引用就指向组件实例\n    ",tags:[{name:"基础",color:"blue"}]},{name:"Vue项目使用ES6 class",answer:"\n    ①新建lineChart.js文件 定义class\n    class LineChart {\n      // 定义构造函数\n      constructor() {\n        constructor方法是类的默认方法\n        通过new命令生成对象实例时 自动调用该方法\n        一个类必须有constructor方法\n        如果没有显式定义 一个空的constructor方法会被默认添加\n      }\n      // 其它行为方法\n      drawAxis(){\n        ...\n      }\n      ...\n    }\n    export default LineChart\n    ②在vue文件中调用\n    import lineChart from '@/components/lineCharts'\n    mounted() {\n      new LineChart(this.ctx, this.config)\n    }\n    ",tags:[{name:"进阶",color:"purple"}]},{name:"Vue项目上传dist文件夹",answer:"\n    .gitignore文件中中删除 /dist\n    ",tags:[{name:"基础",color:"blue"}]},{name:"watch深度监听写法",answer:"\n    watch: {\n      xxValue: {\n        handler(newVal, oldVal) {\n          ...\n        },\n        deep: true,\n      }\n    }\n    ",tags:[{name:"进阶",color:"purple"}]},{name:"路由：基本传值",answer:"\n    this.$router.push({\n      path: '/particulars',\n      query: {\n        id: id\n      }\n    })\n    注意：该方式会带在路由url中 优点是刷新还存在\n    ",tags:[{name:"基础",color:"blue"}]},{name:"路由：keep-Alive",answer:'\n    使用keep-Alive可使组件保持状态不被销毁\n\n    {\n      path: \'/DocNavJs\',\n      component: DocNavJs,\n      meta: {\n        keepAlive: true\n      }\n    }\n\n    <keep-alive>\n      <router-view v-if="$route.meta.keepAlive"></router-view>\n    </keep-alive>\n    <router-view v-if="!$route.meta.keepAlive"></router-view>\n    ',tags:[{name:"进阶",color:"purple"}]},{name:"Vue项目 iframe加载本地HTML 加载PDF 坑",answer:"\n    不能放在src文件夹中\n    必须放在与src同级的public文件夹下\n    ",tags:[{name:"疑难杂症",color:"red"}]},{name:"Vue 多值监听",hasDetail:!0,component:"1、多值监听",answer:"\n    利用computed计算属性实现\n    使用场景：\n    1、监听经纬度两个变量\n    2、多个变量遵循一套相同的处理逻辑（可简化代码）\n\n    <template>\n      <div>{{ multipleValues.value1 }}</div>\n    </template>\n    data() {\n      return {\n        testData1: '1',\n        testData2: '',\n        testData3: ''\n      }\n    },\n    computed: {\n      multipleValues() {\n        return {\n          value1: this.testData1,\n          value2: this.testData2,\n          value3: this.testData3\n        }\n      }\n    },\n    watch: {\n      multipleValues(nVal, oVal) {\n        console.log('监听触发了！', nVal)\n      }\n    },\n    当testData1、2、3改变时都会触发该多值监听\n    ",tags:[{name:"进阶",color:"purple"}]},{name:"Vue template模版调试",answer:"\n    ①created()方法中添加console方法\n    this.$logs = window.console.log\n\n    ②在template中使用\n    {{ $logs(变量) }}\n    ",tags:[{name:"进阶",color:"purple"}]},{name:"Vue 监听对象中的属性 优化写法",answer:"\n    watch: {\n      'obj.a': {\n        handler(nVal, oVal) {\n          ...\n        }\n      }\n    }\n    ",tags:[{name:"进阶",color:"purple"}]},{name:"watch监听 立即执行",answer:"\n    watch: {\n      xxValue: {\n        handler(newVal, oldVal) {\n          ...\n        },\n        immediate: true\n      }\n    }\n    ",tags:[{name:"进阶",color:"purple"}]},{name:"插槽solt详解",hasDetail:!0,component:"2、插槽详解",answer:"\n    详情请看details\n    ",tags:[{name:"进阶",color:"purple"}]},{name:"基础表格组件",hasDetail:!0,component:"3、基础表格组件",answer:"\n    详情请看details\n    ",tags:[{name:"组件",color:"pink"}]},{name:"Vue项目替换当前url",answer:"\n    window.location.href = '/saas-portal/'\n    ",tags:[{name:"基础",color:"blue"}]},{name:"Vue具名插槽",answer:'\n    子组件\n    <solt name="xxx"></solt>\n\n    父组件\n    <template v-slot:xxx>\n      <a-button type="primary">地址</a-button>\n    </template>\n    ',tags:[{name:"进阶",color:"purple"}]},{name:"Vue带参具名插槽",answer:'\n    子组件\n    <slot :name="xxx" :data="xxData"></slot>\n\n    父组件\n    <template v-slot:xxx="xxx">\n      <a-button type="primary" @click="getData(xxx)">地址</a-button>\n    </template>\n    ',tags:[{name:"进阶",color:"purple"}]},{name:"Vue require动态引用资源",answer:'\n    ①require字符串 + 文件名变量\n    <img\n      v-for="(item, index) in imgList"\n      :key="index"\n      :src="require(‘public/studyImg/¥{item}’)"\n    >\n\n    ②将require封装为方法 在template中调用\n    <img\n      v-for="(item, index) in imgList"\n      :key="index"\n      :src="requireImg(item)"\n    >\n\n    // 处理图片资源\n    requireImg(imgName) {\n      return require(‘public/studyImg/¥{imgName}’)\n    }\n    ',tags:[{name:"进阶",color:"purple"}]},{name:"按钮 点击返回上一级",answer:'\n    @click="() => $router.go(-1)"\n    ',tags:[{name:"进阶",color:"purple"}]},{name:"路由：跳转修改页面名称",answer:"\n    routes: [\n      {\n        // 默认的首页\n        path: '/',\n        name: 'Home',\n        component: Home,\n        meta: {\n          index: 0,\n          title: '首页'\n        }\n      },\n      {\n        // 选择城市\n        path: '/city',\n        name: 'City',\n        component: City,\n        meta: {\n          index: 1,\n          title: '选择城市'\n        }\n      }\n\n    router.beforeEach((to, from, next) => {\n      /* 路由发生变化修改页面title */\n      if (to.meta.title) {\n        document.title = to.meta.title\n      }\n      next()\n    })\n    ",tags:[{name:"进阶",color:"purple"}]},{name:"Vuex：Vuex使用步骤",count:2,answer:"\n    1、安装Vuex\n    npm install vuex --save\n    https://vuex.vuejs.org/zh/installation.html\n    2、在store文件夹下新建index.js（详见Vuex index.js笔记）\n    3、在store文件夹下新建getter.js（详见Vuex getter.js笔记）\n    4、在store文件夹下新建modules文件夹存放Vuex模块（详见Vuex模块配置笔记）\n    5、在main.js中引入store，挂载到Vue实例下\n      import store from './store';\n      const app = new Vue({\n        ...App,\n        store\n      })\n    6、将模块状态加入getters 在其它vue文件中使用 this.$store.getter.状态 获取\n    7、在其它vue文件中使用 this.$store.commit/dispatch('名称')\n    ",tags:[{name:"基础",color:"blue"}]},{name:"Vue子组件 对象默认值 default",answer:"\n    props: {\n      xxObj: {\n        type: Object,\n        default: function() {\n          return {\n            属性1: '',\n            属性2: '',\n              ...\n          }\n        }\n      }\n    }\n    ",tags:[{name:"进阶",color:"purple"}]},{name:"路由：嵌套路由",answer:"\n    {\n      path: '/',\n      component: Home,\n      // 在路由对象中使用children属性配置嵌套路由\n      children: [\n        {\n          path: '/test',\n          component: component,\n          meta: {\n            title: '标题'\n          }\n        },\n          ...\n      ]\n    },\n    ",tags:[{name:"基础",color:"blue"}]},{name:"路由：嵌套路由不起作用 坑",answer:"\n    父组件中必须有<router-view></router-view>\n    否则点击无效没反应\n    ",tags:[{name:"疑难杂症",color:"red"}]},{name:"多值监听进阶写法",answer:"\n    const $app = new Vue({\n      computed: {\n        compoundProperty() {\n          // .join() because we don't care about the return value.\n          // 将三个值拼成一个数组再分开 以实现return一个数组\n          return [this.x, this.y, this.z].join()\n        }\n      },\n      watch: {\n        compundProperty() {\n          // do something\n        }\n      }\n    })\n    为了跳过创建数组再拆分和创建引用变量造成的性能损失\n    可使用如下写法\n    /**\n     * return多个值 依靠Date.now()的不断更新computedProperty值\n     * 但要注意单独return Date.now()不会更新computedProperty\n     * 因为 计算属性是基于它们的响应式依赖进行缓存的\n     * Date.now() 不是响应式依赖\n     * 详见 https://cn.vuejs.org/v2/guide/computed.html#计算属性-vs-侦听属性\n     */\n    computed: {\n      computedProperty() {\n        return this.x, this.y, this.z, Date.now();\n      }\n    }\n    ",tags:[{name:"进阶",color:"purple"}]},{name:"路由：动态添加路由 router.addRoutes",answer:"\n    router.addRoutes(routes: Array<RouteConfig>)\n    动态添加更多的路由规则。参数必须是一个符合 routes 选项要求的数组\n    ",tags:[{name:"进阶",color:"purple"}]},{name:"基础：计算属性",answer:"\n    computed: {\n      computedProperty() {\n        return ...\n      }\n    }\n    ",tags:[{name:"基础",color:"blue"}]},{name:"基础：生命周期",answer:"\n    beforeCreate\n    created\n    beforeMount\n    mounted\n    beforeUpdate\n    updated\n    beforeDestroy\n    destroyed\n    ",tags:[{name:"基础",color:"blue"}]},{name:"Vuex：index.js",count:2,answer:"\n    import Vue from 'vue'\n    import Vuex from 'vuex'\n\n    import 模块1 from './modules/模块1'\n\n    import getters from './getters'\n\n    Vue.use(Vuex)\n\n    export default new Vuex.Store({\n      modules: {\n        app,\n        user,\n        permission\n      },\n      state: {\n        appDetail: false\n      },\n      mutations: {\n        ...(可以不写)\n      },\n      actions: {\n        ...(可以不写)\n      },\n      getters\n    })\n    ",tags:[{name:"基础",color:"blue"}]},{name:"Vuex：getter.js",count:2,answer:"\n    const getters = {\n      isMobile: state => state.模块名.状态名,\n      ...\n      lang: state => state.app.lang,\n      theme: state => state.app.theme,\n      color: state => state.app.color,\n    }\n\n    export default getters\n    ",tags:[{name:"基础",color:"blue"}]},{name:"Vuex：模块配置",count:2,answer:"\n    具体做什么事自由决定 可import不同的东西\n    例：模块名为user\n    import { login } from '@/api/permission/login'\n\n    // 可在此处定义工具方法\n    function xx() {\n      ...\n    }\n\n    const user = {\n      state: {\n        token: '',\n\n        ...\n      },\n      mutations: {\n        SET_TOKEN: (state, token) => {\n          state.token = token\n        },\n        ...\n      },\n      actions: {\n        // 登录\n        Login ({ commit }, userInfo) {\n          return new Promise((resolve, reject) => {\n            login(userInfo).then(response => {\n              commit('SET_TOKEN', response.data)\n              resolve(response)\n            }).catch(error => {\n              reject(error)\n            })\n          })\n        },\n        ...\n      },\n    }\n\n    export default user\n    ",tags:[{name:"基础",color:"blue"}]},{name:"Vuex：跨模块调用state",count:2,answer:"\n    actions方法参数不要直接使用 { commit }\n    改为store\n\n    例：\n    actions: {\n      Login ({ commit }, userInfo) {\n        commit('SET_TOKEN', userInfo)\n      }\n    },\n    改为\n    actions: {\n      Login (store, userInfo) {\n        // 该store为根store 可使用getter获取其它模块状态\n        const { commit } = store\n        commit('SET_TOKEN', userInfo)\n      }\n    },\n    ",tags:[{name:"进阶",color:"purple"}]},{name:"上传文件接口对接",answer:"\n    // 上传组件回调函数\n    beforeUpload (file) {\n      // 定义FormData存放二进制文件（关键）\n      const formData = new FormData()\n      formData.append('file', file)\n      upLoadFile(formData).then(res => {\n        if (res.code === 200) {\n          ...\n          this.$message.success('图片上传成功')\n        }\n      })\n    }\n    ",tags:[{name:"基础",color:"blue"}]},{name:"Vue动态引入、注册组件",answer:"\n    关键词：动态 动态引入 动态注册\n    参考资料：\n    https://zhuanlan.zhihu.com/p/35535469\n\n    <template>\n      <div>\n        <component :is=\"component\" />\n          ...\n      </div>\n    </template>\n    export default {\n      data() {\n        return {\n          component: ''\n        }\n      },\n      created() {\n        const path = ...  // 可能来源：session、路由、vuex\n        const name = ...  // 可能来源：session、路由、vuex\n        this.component = require(‘./demo/¥{path}/¥{name}.vue’).default\n      }\n    }\n    注意：require后要加default\n    因为引入的格式为\n    {\n      default: xx组件\n    }\n    ",tags:[{name:"进阶",color:"purple"}]},{name:"Vue过滤器",answer:"\n    filters: {\n      typeFilter (status) {\n        const statusMap = {\n          '0': 'mysql'\n        }\n        return statusMap[status]\n      },\n      osTypeFilter (status) {\n        const statusMap = {\n          '0': 'Centos',\n          '1': 'Redhat',\n          '2': 'Debian',\n          '3': 'Ubuntu'\n        }\n        return statusMap[status]\n      }\n    }\n    ",tags:[{name:"基础",color:"blue"}]},{name:"CSS + Vue渐变色背景",answer:'\n    关键词：背景 渐变 CSS css Css\n    <template>\n      <div :style="{ backgroundImage: gradientColor }"/>\n    </template>\n\n    <script>\n      export default {\n        props/data: {\n          colors: {\n            type: Array\n          }\n        },\n        computed: {\n          gradientColor () {\n            const colorBottom = ‘color-stop(30%, ¥{this.colors[0]})‘\n            const colorTop = ‘to(¥{this.colors[1]})‘\n            return ‘-webkit-gradient(linear, left bottom, left top, ¥{colorBottom}, ¥{colorTop})‘\n          }\n        }\n      }\n    <\/script>\n\n    <style lang="scss">\n    .gradient_color {\n      🌟 绝对定位+宽高100%\n      position: absolute;\n      width: 100%;\n      height: 100%;\n    }\n    </style>\n    ',tags:[{name:"进阶",color:"purple"}]},{name:"动态CSS",answer:'\n    <template>\n      <div\n        class="gradient_color"\n        :class="{ gradient_color__active: active }"\n        :style="{ backgroundImage: gradientColor }"\n      />\n    </template>\n\n    props: {\n      active: {\n        type: Boolean\n      }\n    },\n\n    <style lang="scss">\n    .gradient_color__active {\n      opacity: 1;\n    }\n    </style>\n    ',tags:[{name:"基础",color:"blue"}]},{name:"Vue引入scss",answer:'\n    <style lang="scss" scoped>\n\t    @import "../assets/style/mixin.scss";\n      .main {\n        ...\n      }\n    </style>\n    ',tags:[{name:"基础",color:"blue"}]},{name:"Vuex：文件夹结构",answer:"\n    |-- store\n          |-- index.js\n          |-- getters.js\n          |-- modules\n                |-- 模块1.js\n                |-- 模块2.js\n\n    vuex 分模块配置\n    每个模块有独立的 state、mutations、actions\n    getters汇总输出各模块处理后的数据\n    ",tags:[{name:"基础",color:"blue"}]},{name:"Vuex：mapState",answer:"\n    mapState 可拿到 index.js 下 state 中的值\n    在需要组件的计算属性中引入即可挂载到该组件中 使用 this 获取\n    可避免使用 this.$store.getters.xx 麻烦的调用方式\n    但要注意该情况适用于全部配置在 index.js 下\n    分模块会拿不到值 ❗️\n\n    import { mapState } from 'vuex'\n\n    computed: {\n      ...mapState(\n        [\n          'value1',\n          'value2',\n          ...\n        ]\n      )\n    }\n\n    坑：\n    mapState只能拿到 index.js 下state中的值\n    其它模块应使用mapGetters\n    ",tags:[{name:"进阶",color:"purple"}]},{name:"Vuex：mapGetters",answer:"\n    mapGetters 可拿到 getters.js 中所有定义的值\n    在需要组件的计算属性中引入即可挂载到该组件中 使用 this 获取\n    可避免使用 this.$store.getters.xx 麻烦的调用方式\n\n    import { mapGetters } from 'vuex'\n\n    computed: {\n      ...mapGetters(\n        [\n          'value1',\n          'value2',\n          ...\n        ]\n      )\n    }\n    ",tags:[{name:"进阶",color:"purple"}]},{name:"Vuex：mapMutations",answer:"\n    mapMutations 可拿到所有模块 mutations 下的方法\n    在需要组件的 methods 中引入即可将需要方法挂载到该组件中 使用 this 获取\n    可避免使用 this.$store.commit('MUTATIONS方法名') 麻烦的调用方式\n\n    import { mapMutations } from 'vuex'\n\n    methods: {\n      ...mapMutations(\n        [\n          'function1',\n          'function2',\n          ...\n        ]\n      )\n    }\n    ",tags:[{name:"进阶",color:"purple"}]},{name:"Vuex：mapActions",answer:"\n    mapMutations 可拿到所有模块 actions 下的方法\n    在需要组件的 methods 中引入即可将需要方法挂载到该组件中 使用 this 获取\n    可避免使用 this.$store.dispatch('actions方法名') 麻烦的调用方式\n\n    import { mapActions } from 'vuex'\n\n    computed: {\n      ...mapActions(\n        [\n          'function1',\n          'function2',\n          ...\n        ]\n      )\n    }\n\n    坑：\n    mapState只能拿到 index.js 下state中的值\n    其它模块应使用mapGetters\n    ",tags:[{name:"进阶",color:"purple"}]}],DocNavReact:[{key:"1",name:"创建React项目",answer:"\n    在需要的文件夹中打开命令行\n    npx create-react-app 项目名\n    丢入vscode\n    npm/yarn start\n    ",tags:[{name:"基础",color:"blue"}]},{name:"hooks：创建新组件",answer:"\n    newComponent.jsx\n\n    import React, { useState, useEffect, createContext, useRef } from 'react';\n    import ./newComponent.less\n\n    const newComponent = () => {\n      return (\n        <>\n          我是新组件\n        </>\n      )\n    }\n\n    export default newComponent\n    ",tags:[{name:"基础",color:"blue"}]},{name:"hooks：useState",answer:"\n    理解：\n    将变量及其行为绑定 作为状态与视图解耦\n    UI不必理解数据如何变化\n    定义格式：\n    [变量, set变量] = useState('初始值')\n\n    例：\n    import React, { useState } from 'react';\n\n    const Component = () => {\n      const [name, setName] = useState('初始值')\n\n      const getName = () => {\n        setName('zcb')\n      }\n\n      return (\n        <>\n          <div>我的名字是{name}</div>\n          <button onClick={getName}></button>\n        </>\n      )\n    }\n\n    export default Component\n    ",tags:[{name:"基础",color:"blue"}]},{name:"hooks：useEffect",answer:"\n    理解：\n    翻译为「作用」\n    作用可以理解为数据产生变化时发生的行为（❗️自己理解 可能不准确）\n    进一步讲是 「受xx影响的作用」\n    useEffect将React生命周期和（❗️忘了）合并 达到同样效果\n    定义格式：\n    useEffect(产生的行为, 影响因素)\n\n    例：\n    import React, { useState, useEffect } from 'react';\n\n    const Component = () => {\n      const [name, setName] = useState('初始值')\n\n      /**\n       * 当name发生变化时 执行第一个参数方法中所有语句\n       * 该作用依赖于变量name\n      */\n      useEffect(() => {\n        console.log('换人了，年龄发生变化！')\n      }, name)\n\n      /**\n       * 参数2为常量[] 不会发生变化 因此只在组件创建时执行一次\n       * 同理参数2为 [1], 5 效果相同\n      */\n      useEffect(() => {\n        console.log('换人了，年龄发生变化！')\n      }, [])\n\n      /**\n       * 无参数2 则在组件发生任何更新都执行(❗️自己理解，可能有误)\n      */\n      useEffect(() => {\n        console.log('换人了，年龄发生变化！')\n      })\n\n      const getName = name => {\n        setName(name)\n      }\n\n      const person = [\n        {\n          name: 'zcb',\n          age: '24'\n        },\n        {\n          name: 'sjw',\n          age: '23'\n        }\n      ]\n\n      return (\n        <>\n          <div>我的名字是{name}</div>\n          <button onClick={getName(person[0])}></button>\n          <button onClick={getName(person[1])}></button>\n        </>\n      )\n    }\n\n    export default Component\n    ",tags:[{name:"基础",color:"blue"}]},{name:"hooks：useContext",answer:"\n    关键词：父子传值 父传子\n    父组件Parent：\n    import React, { useState, createContext } from 'react';\n\n    export const MyContext = createContext()\n    const [test=, setTest] = useState(0)\n    const test1 = 'name'\n\n    const Parent = () => {\n      return(\n        <>\n          <MyContext.Provider value={\n            {\n              test,\n              test1: 'xx',\n              ...\n            }\n          }>\n            <Child />\n          </MyContext.Provider>\n        </>\n      )\n    }\n\n    export default Parent\n\n    子组件Child：\n    import React, { useContext } from 'react';\n    import { MyContext } from './Parent'\n\n    const Child = () => {\n      const { test, test1, ... } = useContext(MyContext)\n\n      return(\n        <div>{test1}</div>\n      )\n    }\n\n    export default Child\n    ",tags:[{name:"进阶",color:"purple"}]},{name:"hooks：useRefs",answer:"\n    关键词：子传父\n    理解：获取目标DOM节点中的方法\n    \n    父组件Parent：\n    import React, { useRef } from 'react';\n\n    const testRef = useRef()\n\n    const foo = formRef.current.foo\n\n    const Parent = () => {\n      return(\n        <>\n          <Child testRef={testRef} />\n          <button onClick={foo}></button>\n        </>\n      )\n    }\n\n    export default Parent\n\n    子组件Child：\n    import React, { useImperativeHandle } from 'react';\n\n    const Child = ({testRef}) => {\n      \n      useImperativeHandle(formRef, () => ({\n        foo: fooChild\n      }));\n\n      const fooChild = () => {\n        console.log('fooChild')\n      }\n\n      return(\n        <div>子组件</div>\n      )\n    }\n\n    export default Child\n    ",tags:[{name:"进阶",color:"purple"}]},{name:"Warning A future version of React will block javascript",answer:'\n    解决方法：给href属性一个不可达到的地址#!，也就不会跳转页面\n    <a href="#!" onClick={this.delete}>删除</a>\n    ',hasDetail:!0,htmlUrl:"https://blog.csdn.net/xzlawin/article/details/109747021",tags:[{name:"疑难杂症",color:"red"}]},{name:"React强行修改antD原生类名样式",answer:"\n    .styleName {\n      :global {\n        .ant-drawer-content {\n          overflow: unset;\n        }\n      }\n    }\n    ",hasDetail:!0,htmlUrl:"https://www.jianshu.com/p/3172c908d574",tags:[{name:"疑难杂症",color:"red"}]},{name:"umi + dva + hooks接口联调步骤",answer:"\n    services/api.js\n\n    import request from '@/utils/umiRequest';\n    export async function xx(params) {\n      return request('/api/xxx/xx/x', {\n        method: 'GET',\n        params\n      });\n    }\n    ------------------------------------\n    modal.js\n\n    import {\n      xx,\n      ...\n    } from '@/services/api.js';\n    \n    export default {\n      namespace: 'modal名',\n      state: {\n        xxList: []  // 暂未搞清楚 先无视\n      },\n      effects: {\n        *xxGet({ payload, callback }, { call, put }) {\n          const response = yield call(getBusinessFieldList, payload);\n          if (response) {\n            callback(response)\n          }\n        },\n        ...\n      },\n      reducers: {}\n    }\n\n    ------------------------------------\n    components.js\n    import { useDispatch } from 'dva';\n\n    const components = () => {\n      const dispatch = useDispatch();\n\n      const getList = () => {\n        dispatch({\n          type: 'modal名/方法名',\n          payload: {\n            pageNo: 1,\n            pageSize: 5,\n            name: ''\n          },\n          callback: res => {\n            ...\n          }\n        });\n      }\n    }\n    ",tags:[{name:"基础",color:"blue"}]}],DocNavThreeJs:[{name:"🔝  学习资料",answer:"\n    我的语雀：\n    https://www.yuque.com/zhanggeng-53fi4/af8383/toc\n    图灵社区：\n    https://www.ituring.com.cn/book/1272\n    某中文文档：\n    http://www.webgl3d.cn/Three.js/\n    官方网站：\n    https://threejs.org/\n    ",tags:[{name:"基础",color:"blue"}]},{name:"Vue引入three.js",hasDetail:!0,component:"1、引入threeJs",answer:'\n    1、cnpm install three --save\n    2、创建根canvas\n    <div>\n      <canvas id="container" width="400px" height="300px"></canvas>\n    </div>\n    3、import * as THREE from \'three\'\n    4、methods中定义初始化函数init() 详见details\n    5、mounted()调用init()\n\n    快速进入：\n    1、引入threeJs\n    \n    参考资料：\n    https://blog.csdn.net/u014452812/article/details/82783991\n    ',tags:[{name:"基础",color:"blue"}]},{name:"正交投影照相机",hasDetail:!0,component:"2、正交投影相机",answer:"\n    构造函数：\n    THREE.OrthographicCamera(left, right, top, bottom, near, far)\n    ",tags:[{name:"基础",color:"blue"}]},{name:"透视投影照相机",hasDetail:!0,component:"3、透视投影相机",answer:"\n    构造函数：\n    THREE.PerspectiveCamera(fov, aspect, near, far)\n    ",tags:[{name:"基础",color:"blue"}]},{name:"基本立方体",hasDetail:!0,component:"4、基本立方体",answer:"\n    立方体构造函数：\n    THREE.CubeGeometry(width, height, depth, widthSegments, heightSegments, depthSegments)\n    ",tags:[{name:"基础",color:"blue"}]},{name:"基本平面",hasDetail:!0,component:"5、基本平面",answer:"\n    立方体构造函数：\n    THREE.PlaneGeometry(width, height, widthSegments, heightSegments)\n    ",tags:[{name:"基础",color:"blue"}]}],DocNavAntD:[{name:"修改Modal宽度",answer:'\n    <a-modal\n      width="70%"\n      ...\n    >\n      ...\n    </a-modal>\n    px也可 不能直接写数字 需加单位\n    ',tags:[{name:"基础",color:"blue"}]},{name:"修改Table列宽",answer:"\n    在columns数组中配置\n    const columns = [\n      {\n        dataIndex: 'name',\n        key: 'name',\n        slots: { title: 'customTitle' },\n        ...\n        width: '500px'\n      }\n      ...\n    ]   \n    ",tags:[{name:"基础",color:"blue"}]},{name:"置空select框",answer:'\n    ①将value值赋给本地变量\n    <a-select\n      mode="multiple"\n      :default-value="[]"\n      :value="本地变量"\n      ...\n      @change="selectChange"\n    >\n    ②在选择变化时给本地变量赋值\n    selectChange(value) {\n      本地变量 = value\n    }\n    ③在重置方法中清空本地变量\n    reset() {\n      本地变量 = []\n    }\n    ',tags:[{name:"逻辑",color:"blue"}]},{name:' Table插槽 <a slot="name" slot-scope="text, record"中 test和record是什么',answer:'\n    test是插槽"slot=xx"对应的数据对象的xx属性\n    record是\b该插槽对应的数据对象\n    ',tags:[{name:"基础",color:"blue"}]},{name:" Modal修改样式",answer:"\n    通过bodyStyle添加 格式为对象\n    <a-modal\n      :bodyStyle=\"{ background:'red, 'max-height:600px' }\" 或\n      :bodyStyle=\"modalStyle\"\n      ...\n    >\n      ...\n    </a-modal>\n    \n    modalStyle: {\n      'max-height': '600px',\n      overflow: 'auto'\n    }\n    ",tags:[{name:"进阶",color:"purple"}]},{name:" 后台布局菜单点击收起其它展开项",answer:'\n    需要配置好每项菜单的key\n    ①a-menu添加属性open-keys和openChange\n    <a-menu\n      theme="dark"\n      mode="inline"\n      :open-keys="openKeys"\n      @openChange="onOpenChange"\n    >\n    ②定义menuKeys、openKeys数组 遍历每项菜单的key 加入menuKeys数组\n    menuKeys：所有菜单的key\n    openKeys：当前展开菜单的key\n    initMenuKeys() {\n      if (this.menuAutoPackUp) {\n        this.menuList.forEach(item => {\n          this.menuKeys.push(item.key)\n          item.children.forEach(itemSub => {\n            this.menuKeys.push(itemSub.key)\n          })\n        })\n      }\n    }\n    ③定义onOpenChange方法\n    // 自动收起其它展开菜单\n    onOpenChange(openKeys) {\n      const latestOpenKey = openKeys.find(key => this.openKeys.indexOf(key) === -1)\n      if (this.menuKeys.indexOf(latestOpenKey) === -1) {\n        this.openKeys = openKeys\n      } else {\n        // 若是一级菜单\n        if (latestOpenKey.indexOf(\'sub\') === -1) {\n          this.openKeys = latestOpenKey ? [latestOpenKey] : []\n        } else {\n          // 若是二级子菜单\n          this.openKeys = latestOpenKey ? [latestOpenKey, latestOpenKey.slice(0, 4)] : []\n        }\n      }\n    }\n    注意：\n    本句slice不一定 本例中为sub1-3 所以其父菜单为sub1\n    基本意思是如果存在二级子菜单则把该子菜单和其副菜单的key加入当前的openkeys\n    this.openKeys = latestOpenKey ? [latestOpenKey, latestOpenKey.slice(0, 4)] : []\n    ',tags:[{name:"进阶",color:"purple"}]},{name:"antdv: Each record in table should have a unique `key` prop,or set `rowKey`",answer:'\n    表中的每个记录应该有唯一的“key”支持，或者将“rowKey”设置为唯一的主键\n\n    解决方案：\n    ①传入的数据对象包含key属性\n    ②在表格参数中增加 rowKey="id" 设置id为唯一主键\n    ',tags:[{name:"疑难杂症",color:"red"}]},{name:"基本表格",answer:"\n    Part1:\n    <a-table\n      :columns=\"columns\"\n      :data-source=\"data\"\n      rowKey=\"id\" （如果传入数据无key）\n    >\n      <span slot=\"remarks\" slot-scope=\"text\">{{ text }}</span>\n      <span slot=\"details\" slot-scope=\"text, record\" @click=\"showDetail(record)\">\n        <a>details</a>\n      </span>\n    </a-table>\n\n    Part2:\n    <script>标签下\n    const columns = [\n      {\n        title: '普通标题',\n        dataIndex: 'name',\n        width: '300px'\n      },\n      {\n        title: '插槽标题',\n        dataIndex: 'remarks',\n        scopedSlots: { customRender: 'remarks' },\n        width: '200px'\n      },\n      {\n        title: '跳转标题',\n        scopedSlots: { customRender: 'details' },\n        width: '100px'\n      }\n    ]\n\n    Part3:\n    data() {\n      return {\n        columns,\n        // 真实数据属性名应与columns定义的dataIndex相同\n        data: [\n          {\n            key: '1',\n            name: 'xx',\n            remarks: 'xxx',\n            details: 'xxx'\n          }\n        ],\n        ...\n      }\n    }\n\n    官方链接：\n    https://www.antdv.com/components/table-cn/\n    ",tags:[{name:"基础",color:"blue"}]},{name:"基本按钮",answer:'\n    <a-button type="primary">\n      Primary\n    </a-button>\n    ',tags:[{name:"基础",color:"blue"}]},{name:"基本弹框",answer:'\n    <a-modal\n      width="70%"\n      v-model="visible"\n      title="任务模板"\n      @ok="handleOk"\n    >\n      弹框\n    </a-modal>\n\n    data: {\n      return {\n        visible: false\n      }\n    }\n\n    // 打开弹窗方法\n    xxClick() {\n      this.visible = true\n    }\n\n    // 关闭弹窗\n    handleOk() {\n      this.visible = false\n    }\n    ',tags:[{name:"基础",color:"blue"}]},{name:"基本气泡卡片",count:2,answer:'\n    <a-popover title="Title">\n      <template slot="content">\n        <p>该template为内容区域</p>\n      </template>\n      <a-button type="primary">\n        触发区域\n      </a-button>\n    </a-popover>\n\n    https://www.antdv.com/components/popover-cn/\n    ',tags:[{name:"基础",color:"blue"}]},{name:"基本下拉选择框",answer:'\n    <a-select\n      default-value="默认数据" \n      style="width: 120px;"\n      placeholder="请选择"  // 注意：如果设置default-value占位符不起作用\n      @change="xxSelect"\n    >\n      <a-select-option\n        v-for="(item, index) in xxList"\n        :value="item"\n        :key="index"\n      >\n        {{ item }}\n      </a-select-option>\n    </a-select>\n\n    data: {\n      return {\n        xxList: [1, 2, 3]\n      }\n    }\n\n    xxSelect(val) {\n      console.log(val)\n    }\n\n    https://www.antdv.com/components/select-cn/\n    ',tags:[{name:"基础",color:"blue"}]},{name:"表格 滚动配置",answer:'\n    <a-table \n      :columns="columns"\n      :data-source="data"\n      :pagination="{ pageSize: 100 }"\n      :scroll="{ x: 1500, y: 300 }"\n    >\n      <a slot="action" slot-scope="text">action</a>\n    </a-table>\n\n    :pagination为数据数量\n    scroll.x 为大于表格宽度的固定值或百分比\n    非固定列宽度之和不要超过 scroll.x\n\n    https://www.antdv.com/components/table-cn/\n    ',tags:[{name:"进阶",color:"purple"}]},{name:"刷新保留菜单状态",answer:'\n    open-keys: 展开的菜单\n    :open-keys: 展开的菜单项\n    这二项参数如果手动绑定了值（因为实现点击收起其它展开项）\n    则需要写方法动态配置将当前值填入\n\n    <a-menu\n      ...\n      :open-keys="openKeys"\n      :open-keys="openSubKeys"\n    >\n      ...\n    </a-menu>\n\n    data() {\n      return {\n        openKeys: [],\n        openSubKeys: []\n      }\n    }\n\n    /* 暂用三级菜单的配置方法 */\n    setOpenKey() {\n      this.menuList.forEach(item1 => {\n        item1.children.forEach(item2 => {\n          item2.children.forEach(item3 => {\n            // 根据路由判断 路由名称需要形成嵌套关系仔细设计\n            if (this.$route.path.indexOf(item3.path) !== -1) {\n              this.openKeys.push(item1.key)\n              this.openKeys.push(item2.key)\n              this.openSubKeys.push(item3.key)\n            }\n          })\n        })\n      })\n    }\n    ',tags:[{name:"进阶",color:"purple"}]},{name:"You cannot set a form field before rendering a field associated with the value.",answer:"\n    使用Form组件setFieldsValue方法时\n    如果设置表单内未出现的字段就会出现该错误\n    ",tags:[{name:"疑难杂症",color:"red"}]},{name:"表格 固定操作列",answer:"\n    需搭配左右滚动使用\n    <a-table \n      ...\n      :scroll=\"{ x: 1200 }\"\n    >\n    const columns = {\n      ...\n      {\n        title: '操作',\n        dataIndex: 'operation',\n        fixed: 'right',  // 关键句\n        scopedSlots: { customRender: 'operation' }\n      }\n    }\n    ",tags:[{name:"进阶",color:"purple"}]},{name:"基本选择",answer:'\n    <a-radio-group v-model="value" @change="onChange">\n      <a-radio :value="1">\n        A\n      </a-radio>\n      <a-radio :value="2">\n        B\n      </a-radio>\n    </a-radio-group>\n    ',tags:[{name:"基础",color:"blue"}]},{name:"功能条：栅格布局",answer:'\n    关键词：菜单条 功能条 bar Bar 栅格 布局 左右\n    \n    <a-row>\n      <a-col :span="18" class="menu-l"></a-col>  // span为所占格\n      <a-col :span="3" :offset="3"></a-col>  // offset为偏移格数\n    </a-row>\n\n    .menu-l {\n      display: flex;\n      > * {\n        margin-right: 8px;\n      }\n    }\n    ',tags:[{name:"基础",color:"blue"}]},{name:"[antd: Switch] `value` is not a valid prop, do you mean `checked`?",answer:'\n    添加valuePropName\n    <Form.Item valuePropName="checked" ><Switch /></Form.Item>\n    ',hasDetail:!0,htmlUrl:"https://blog.csdn.net/qq_40259641/article/details/112536060",tags:[{name:"疑难杂症",color:"red"}]},{name:"[antd: Form.Item] `children` is array of render props cannot have `name`",answer:"\n    一个FormItem里只能放一个值\n    例：不能同时放两个CheckBox\n    ",tags:[{name:"疑难杂症",color:"red"}]}],DocNavIView:[{key:"1",name:"表单自定义验证",answer:"\n    const xxRule = (rule, value, callback) => {\n      if (!value) {\n        callback(new Error('值不能不能为空'))\n      } else if (value.length > 10) {\n        callback(new Error('值不允许超过10个字'))\n      } else callback()\n    }\n\n    ruleForm: {\n      variable: [\n        {\n          required: true,\n          validator: xxRule,\n          trigger: 'blur' \n        }\n      ]\n    }\n    ",tags:[{name:"基础",color:"blue"}]},{key:"2",name:"取消表单验证",answer:'\n    <Form\n      ...\n      ref="formValidate"\n    >\n\n    this.$refs.formValidate.resetFields()\n    ',tags:[{name:"基础",color:"blue"}]},{key:"3",name:"Modal自定义取消和确定按钮",answer:'\n    <Modal v-model="modalShow">\n      ...\n      <section slot="footer" style="textAlign:center">\n        <Button\n          type="primary"\n          @click="okClick()"\n        >\n          确定\n        </Button>\n        <Button\n          @click="cancelClick()"\n          style="margin-left:20px"\n        >\n          取消\n        </Button>\n      </section>\n    </Modal>\n    ',tags:[{name:"基础",color:"blue"}]},{key:"4",name:"Modal隐藏取消和确定按钮",answer:'\n    放置一个空插槽\n    <Modal title="标题" v-model="visible">\n      ...\n      <div slot="footer"></div>\n    </Modal>\n    ',tags:[{name:"基础",color:"blue"}]}],DocNavECharts:[{key:"1",name:"eCharts饼图 hover显示信息",answer:"\n    tooltip 与 series同级\n    \n    tooltip: {\n      trigger: 'item',\n      formatter: '{b}: {d}%'\n    },\n    ",tags:[{name:"基础",color:"blue"}]},{key:"1",name:"eCharts折线图坐标轴显示整数",answer:"\n    y轴使用例：\n    yAxis: {\n      minInterval: 1,\n        ...\n    }\n    ",tags:[{name:"基础",color:"blue"}]}],DocNavTaro:[{name:"taro项目初始化",answer:"\n    打开对应文件夹命令行\n    taro init 项目名\n\n    根据提示选择配置项\n    ",hasDetail:!0,htmlUrl:"../../../../../static/taroHtml/initTaro.html",tags:[{name:"基础",color:"blue"}]},{name:"微信小程序命令",answer:"\n    # npm script\n    npm run dev:weapp\n    npm run build:weapp\n    ",tags:[{name:"基础",color:"blue"}]},{name:"导入微信开发者工具",answer:"\n    1、npm run dev:weapp -> 产生dist文件夹\n    2、打开微信开发者工具\n    3、添加小程序 -> 导入项目\n    4、目录选择项目目录dist文件夹\n    5、导入项目\n    ",tags:[{name:"基础",color:"blue"}]},{name:"taro引入Vant Weapp",answer:"\n    见详情\n    语雀：\n    https://www.yuque.com/mgi3va/vykior/pso5r2\n    ",hasDetail:!0,htmlUrl:"../../../../../static/taroHtml/vantWeapp.html",tags:[{name:"基础",color:"blue"}]}],DocNavAppletsWx:[{key:"1",name:"WXML 数据绑定",answer:"\n    \x3c!--wxml--\x3e\n    <view> {{message}} </view>\n\n    // page.js\n    Page({\n      data: {\n        message: 'Hello MINA!'\n      }\n    })\n    ",tags:[{name:"基础",color:"blue"}]},{key:"2",name:"WXML 列表渲染",answer:'\n    \x3c!--wxml--\x3e\n    <view wx:for="{{array}}"> {{item}} </view>\n\n    // page.js\n    Page({\n      data: {\n        array: [1, 2, 3, 4, 5]\n      }\n    })\n    ',tags:[{name:"基础",color:"blue"}]},{key:"3",name:"WXML 条件渲染",answer:"\n    \x3c!--wxml--\x3e\n    <view wx:if=\"{{view == 'WEBVIEW'}}\"> WEBVIEW </view>\n    <view wx:elif=\"{{view == 'APP'}}\"> APP </view>\n    <view wx:else=\"{{view == 'MINA'}}\"> MINA </view>\n\n    // page.js\n    Page({\n      data: {\n        view: 'MINA'\n      }\n    })\n    ",tags:[{name:"基础",color:"blue"}]},{key:"4",name:"WXML 模版",answer:'\n    使用 name 属性，作为模板的名字。然后在<template/>内定义代码片段\n    <template name="msgItem">\n      <view>\n        <text> {{index}}: {{msg}} </text>\n        <text> Time: {{time}} </text>\n      </view>\n    </template>\n\n    使用 is 属性，声明需要的使用的模板，然后将模板所需要的 data 传入\n    <template is="msgItem" data="{{...item}}"/>\n\n    Page({\n      data: {\n        item: {\n          index: 0,\n          msg: \'this is a template\',\n          time: \'2016-09-15\'\n        }\n      }\n    })\n\n    is 属性可以使用 Mustache 语法，来动态决定具体需要渲染哪个模板\n    <template name="odd">\n      <view> odd </view>\n    </template>\n    <template name="even">\n      <view> even </view>\n    </template>\n\n    <block wx:for="{{[1, 2, 3, 4, 5]}}">\n      <template is="{{item % 2 == 0 ? \'even\' : \'odd\'}}"/>\n    </block>\n    ',tags:[{name:"基础",color:"blue"}]},{key:"5",name:"小程序使用vant组件",answer:'\n    1、小程序目录 cnpm i @vant/weapp -S --production\n    2、设置 -> 项目设置 勾选 使用npm模块\n    3、工具 -> 构建npm\n    4、将 app.json 中的 "style": "v2" 去除\n    页面json配置中 定义usingComponents\n    "usingComponents": {\n      "van-grid": "@vant/weapp/grid/index",\n      "van-grid-item": "@vant/weapp/grid-item/index"\n    }\n    配置好后在页面中使用即可\n    ',tags:[{name:"基础",color:"blue"}]},{key:"6",name:"基本导航跳转方法",answer:"\n    wx.navigateTo({\n      url: '../index-application/index'\n    })\n    ",tags:[{name:"基础",color:"blue"}]},{key:"7",name:"wx.getUserInfo用法",answer:"\n    wx.getUserInfo({\n      success: res => {\n        ...\n        例：\n        app.globalData.userInfo = res.userInfo\n        this.setData({\n          userInfo: res.userInfo,\n          hasUserInfo: true\n        })\n      }\n    })\n    ",tags:[{name:"基础",color:"blue"}]},{key:"8",name:"设置页面标题",answer:'\n    page.json\n    {\n      "navigationBarTitleText": "标题"\n        ...\n    }\n    ',tags:[{name:"基础",color:"blue"}]},{key:"9",name:"基本赋值",answer:"\n    this.setData({\n      previewNote: this.selectTodayNote()\n    })\n    ",tags:[{name:"基础",color:"blue"}]},{key:"10",name:"微信小程序事件带参",answer:'\n    ①在对应组件定义属性data-xx\n    例：\n    <view\n      class=".."\n      wx:for="{{ previewNote }}"\n      bindtap="showDetail"\n      data-note="{{ item }}"\n    >\n      <text>{{ item.word }}</text>\n    </view>\n    ②在js中使用e获取:\n    showDetail: function (e) {\n      this.setData({\n        isDetailShow: true,\n        noteAnswer: e.currentTarget.dataset.note.details\n      })\n    }\n    ',tags:[{name:"基础",color:"blue"}]},{key:"11",name:"微信小程序new Date().toLocaleDateString()坑",answer:"\n    似乎因为IOS兼容的关系 微信小程序转换当天日期\n    并不是YYYY/MM/DD格式\n    \n    解决方案：使用\n    new Date().getFullYear() + '/' + (new Date().getMonth() + 1) + '/' + new Date().getDate()\n    代替\n    ",tags:[{name:"疑难杂症",color:"red"}]},{key:"12",name:"微信小程序 引入其它Js文件",answer:"\n    xx.js\n    export { xxList }\n    在需要的页面\n    const xx = require('../../utils/xx.js');\n\n    data: {\n      list: xx\n    }\n    ",tags:[{name:"基础",color:"blue"}]},{key:"13",name:"微信小程序 导入外联样式表",answer:'\n    使用@import语句可以导入外联样式表\n    @import后跟需要导入的外联样式表的相对路径\n    用;表示语句结束\n\n    /** common.wxss **/\n    .small-p {\n      padding:5px;\n    }\n\n    /** app.wxss **/\n    @import "common.wxss";\n    .middle-p {\n      padding:15px;\n    }\n    ',tags:[{name:"基础",color:"blue"}]},{key:"14",name:"微信小程序 上传到远端git仓库",answer:"\n    1、版本管理 -> 初始化git仓库\n    2、版本管理 -> 设置 -> 远程 -> 添加仓库\n    3、输入仓库名称及url\n    4、版本管理 -> 设置 -> 网络和认证 -> 输入远端仓库账号和密码\n    5、版本管理 -> 选中「推送到新的远程仓库分支」-> 选择刚才添加到仓库 -> 输入分支名\n    6、确定 ✅\n    ",tags:[{name:"基础",color:"blue"}]},{key:"15",name:"微信小程序 自定义组件 使用",answer:'\n    1、目标文件夹 -> 右键新建components 即可生成四文件\n    2、在目标页面json中配置usingComponents\n      "usingComponents": {\n        "component-tag-name": "path/to/the/custom/component"\n      }\n    3、在页面中使用\n      <component-tag-name></component-tag-name>\n    ',tags:[{name:"基础",color:"blue"}]},{key:"16",name:"微信小程序 for循环如何使用index",answer:'\n    <view\n      wx:for="{{xxList}}"\n      wx:key="index"\n    ></view>\n    注意：index没有双括号\n    ',tags:[{name:"基础",color:"blue"}]},{key:"17",name:"微信小程序 自定义组件生命周期",answer:"\n    Component({\n      lifetimes: {\n        attached: function() {\n          // 在组件实例进入页面节点树时执行\n        },\n        detached: function() {\n          // 在组件实例被从页面节点树移除时执行\n        },\n      },\n\n      https://developers.weixin.qq.com/miniprogram/dev/framework/custom-component/lifetimes.html\n    ",tags:[{name:"基础",color:"blue"}]},{key:"18",name:"hover-class时间设置",answer:'\n    设置hover-stay-time\n    <view \n    class="title"\n    hover-class="title-click"\n    hover-stay-time="50"\n    ...\n  >\n    ',tags:[{name:"基础",color:"blue"}]},{key:"19",name:"基本事件绑定",answer:'\n    如bindtap，当用户点击该组件的时候会在该页面对应的Page中找到相应的事件处理函数\n    <view id="tapTest" data-hi="Weixin" bindtap="tapName"> Click me! </view>\n\n    在相应的Page定义中写上相应的事件处理函数，参数是event。\n    Page({\n      tapName: function(event) {\n        console.log(event)\n      }\n    })\n    ',tags:[{name:"基础",color:"blue"}]},{name:"vant上传图片功能实现",answer:'\n    关键词：上传 上传图片 vant\n    ——————————————————————————————————————————————————————————————————————————————————\n    使用vant Uploader 文件上传组件\n    vant组件使用搜索 小程序使用vant组件\n    ——————————————————————————————————————————————————————————————————————————————————\n    wxml:\n    <van-uploader\n      file-list="{{ repairPhotoList }}"\n      bind:after-read="afterRead"\n      bind:delete="delete"  // ❗️不写删除回调将无效\n      max-count="3"  // 上传数量限制\n      max-size="10485760"  //上传大小限制\n    />\n    ——————————————————————————————————————————————————————————————————————————————————\n    js:\n    data: {\n      fileList: []\n    }\n\n    afterRead(event) {\n      const { file } = event.detail;\n      const _this = this\n      // 当设置 mutiple 为 true 时, file 为数组格式，否则为对象格式\n      wx.uploadFile({\n        // 上传文件接口地址\n        url: globalData.host[globalData.env] + \'/park-invest-common/wx/file/upload\',\n        filePath: file.url,\n        name: \'file\',\n        formData: { user: \'test\' },\n        success(res) {\n          // ❗️ 重要 上传完成需要更新 fileList\n          const { fileList = [] } = _this.data;\n          fileList.push(\n            { \n              ...file,\n              url: JSON.parse(res.data).data // ❗️ 接口拿回来是JSON\n            }\n          );\n          // ❗️ 坑 需要重新定义变量更新data\n          _this.setData({ fileList });\n        },\n      });\n    },\n\n    delete(e) {\n      ❗️ 大坑 需要重新定义变量更新data\n      const { repairPhotoList = [] } = this.data;\n      repairPhotoList.splice(e.detail.index, 1)\n      this.setData({ repairPhotoList })\n    },\n    ',hasDetail:!0,htmlUrl:"https://youzan.github.io/vant-weapp/#/uploader#tu-pian-yu-lan",tags:[{name:"基础",color:"blue"}]},{name:"vant多选上传",answer:'\n    关键词：多选 多选上传 一次上传多张\n    ——————————————————————————————————————————————————————————————————————————————————\n    <van-uploader\n      file-list="{{ repairPhotoList }}"\n      bind:after-read="afterRead"\n      bind:delete="delete"\n      max-count="3"\n      max-size="10485760"\n      multiple  // 多选\n    />\n    ——————————————————————————————————————————————————————————————————————————————————\n    afterRead(event) {\n      const { file } = event.detail;\n      // 当设置 mutiple 为 true 时, file 为数组格式，否则为对象格式\n      file.forEach(item => this.upLoadImg(item))\n    },\n\n    upLoadImg(file) {\n      const _this = this\n      return wx.uploadFile({\n        url: globalData.host[globalData.env] + \'/park-invest-common/wx/file/upload\',\n        filePath: file.url,\n        name: \'file\',\n        formData: { user: \'test\' },\n        success(res) {\n          // 上传完成需要更新 fileList\n          const { fileList = [] } = _this.data;\n          fileList.push(\n            { \n              ...file,\n              url: JSON.parse(res.data).data\n            }\n          );\n          _this.setData({ fileList });\n        },\n      });\n    },\n    ',tags:[{name:"基础",color:"blue"}]},{name:"project.config.json",answer:"\n    微信小程序开发者工具\n    在每个项目的根目录都会生成一个 project.config.json\n    在工具上做的任何配置都会写入到这个文件\n    ",tags:[{name:"基础",color:"blue"}]}],DocNavAppletsDd:[{key:"1",name:"钉钉",answer:'\n    <a-modal\n      width="70%"\n      ...\n    >\n      ...\n    </a-modal>\n    px也可 不能直接写数字 需加单位\n    ',tags:[{name:"样式",color:"purple"}]},{key:"2",name:"antDesign修改Table列宽",answer:"\n    在columns数组中配置\n    const columns = [\n      {\n        dataIndex: 'name',\n        key: 'name',\n        slots: { title: 'customTitle' },\n        ...\n        width: '500px'\n      }\n       ...\n    ]   \n    ",tags:[{name:"样式",color:"purple"}]},{key:"3",name:"antDesign置空select框",answer:'\n    ①将value值赋给本地变量\n    <a-select\n      mode="multiple"\n      :default-value="[]"\n      :value="本地变量"\n      ...\n      @change="selectChange"\n    >\n    ②在选择变化时给本地变量赋值\n    selectChange(value) {\n      本地变量 = value\n    }\n    ③在重置方法中清空本地变量\n    reset() {\n      本地变量 = []\n    }\n    ',tags:[{name:"逻辑",color:"blue"}]},{key:"4",name:'Table插槽 <a slot="name" slot-scope="text, record"中 test和record是什么',answer:'\n    test是插槽"slot=xx"对应的数据对象的xx属性\n    record是\b该插槽对应的数据对象\n    ',tags:[{name:"基础",color:"green"}]},{key:"5",name:"Modal修改样式",answer:"\n    通过bodyStyle添加 格式为对象\n    <a-modal\n      :bodyStyle=\"{ background:'red, 'max-height:600px' }\" 或\n      :bodyStyle=\"modalStyle\"\n      ...\n    >\n      ...\n    </a-modal>\n    \n    modalStyle: {\n      'max-height': '600px',\n      overflow: 'auto'\n    }\n    ",tags:[{name:"样式",color:"purple"}]}],DocNavMac:[{name:"mac打开终端命令行",answer:"\n    control+空格\n    输入terminal\n    ",tags:[{name:"基础",color:"blue"}]},{name:"删除某文件夹下所有文件命令",answer:"\n    打开命令提示符\n    cd 目标文件夹\n    rm -f *\n    ",tags:[{name:"基础",color:"blue"}]},{name:"修改DNS",answer:"\n    点击状态栏wifi -> 打开网络偏设置 -> 选择当前网络 > 高级 -> DNS\n    ",tags:[{name:"基础",color:"blue"}]},{name:"命令行 mac返回上一级文件夹",answer:"\n    打开命令提示符\n    cd..\n    ",tags:[{name:"基础",color:"blue"}]},{name:"mac修改host文件",answer:"\n    shift + command + g 前往文件夹/etc\n    找到hosts文件复制到桌面\n    打开方式-文本编辑\n    编辑成功之后在etc中复制替换\n    \n    参考链接：\n    https://www.jianshu.com/p/3d4bdf180bd6\n    ",tags:[{name:"基础",color:"blue"}]},{name:"mac新建txt",answer:"\n    文本编辑 -> 左上角菜单：格式 -> 制作纯文本\n\n    参考链接：\n    https://zhidao.baidu.com/question/240694421784930724.html\n    ",tags:[{name:"基础",color:"blue"}]},{name:"Error: EACCES: permission denied, mkdir ...",answer:"\n    在安装命令前加上sudo\n    ",tags:[{name:"疑难杂症",color:"red"}]},{name:"mac显示隐藏文件",answer:"\n    command + shift + .\n    ",tags:[{name:"基础",color:"blue"}]},{name:"mac Chrome隐藏标题导航栏",answer:"\n    command + shift + B\n    command + ctrl + F\n    ",tags:[{name:"基础",color:"blue"}]},{name:"mac Chrome切换tab快捷键",answer:"\n    前一个tab：command + option + ←\n    后一个tab：command + option + →\n    ",tags:[{name:"基础",color:"blue"}]}],DocNavWindows:[{key:"1",name:"删除某文件夹下所有文件命令",answer:"\n    打开命令提示符\n    cd 目标文件夹\n    del *\n    ",tags:[{name:"基础",color:"blue"}]},{key:"2",name:"命令行 返回上一级文件夹",answer:"\n    打开命令提示符\n    cd..\n    ",tags:[{name:"基础",color:"blue"}]}],DocNavUniapp:[{name:"uniapp坑点",answer:"\n    1、v-for循环 + 点击事件传参 无法得到item\n    2、动态class与style与Vue写法不同 详细搜文档\n    ",tags:[{name:"疑难杂症",color:"red"}]},{name:"uni组件文档",answer:"\n    组件展示：\n    https://hellouniapp.dcloud.net.cn/pages/component/view/view\n    组件文档：\n    https://uniapp.dcloud.io/component/README\n    ",tags:[{name:"基础",color:"blue"}]},{name:"uniapp项目动态style",answer:'\n    与Vue写法不同 不可使用模板字符串 ‘’\n\n    :class="{css属性名1: 变量1, css属性名2: 变量2}"\n    :style="{color: item.color}"\n    :style="{color: color, fontSize: \'14px\' }"\n    ',tags:[{name:"基础",color:"blue"}]},{name:"uniapp项目动态class",answer:"\n    与Vue写法不同 不可使用模板字符串 ‘’\n\n    :class=\"{'类名1': 变量1, '类名2': 变量2}\"\n    :class=\"{'skeleton': loading}\"\n    ",tags:[{name:"基础",color:"blue"}]},{name:"预编译器错误：代码使用了scss/sass语言，但未安装相应的编译器插件，请前往插件市场安装该插件",answer:"\n    HBuilderX中\n    工具 -> 插件安装 -> 安装新插件 -> 前往插件市场安装\n\n    插件市场账号：\n    账号：791256768@qq.com\n    密码：aw87zx65Vbncx\n    ",hasDetail:!0,htmlUrl:"https://blog.csdn.net/zhouqiping/article/details/108410431",tags:[{name:"疑难杂症",color:"red"}]},{name:"HBuilderX配置git",answer:"\n    插件市场安装插件\n    在HBuilderX中右击文件夹选择git操作\n    ",hasDetail:!0,htmlUrl:"https://blog.csdn.net/qq_35713752/article/details/100142199",tags:[{name:"基础",color:"blue"}]},{name:"HBuilderX拖入项目如何启动",answer:"\n    进入 .hBuilderx 文件夹下 launch.json\n    然后在工具栏中启动\n    ",tags:[{name:"基础",color:"blue"}]},{name:"复制到剪贴板（H5不支持）",answer:"\n    uni.setClipboardData({\n      data: xx\n    })\n\n    文档：\n    https://uniapp.dcloud.io/api/system/clipboard?id=setclipboarddata\n    ",tags:[{name:"进阶",color:"purple"}]},{name:"Vue Cli 命令行 新建项目",answer:"\n    1、全局安装vue-cli\n    npm install -g @vue/cli\n    2、\n    vue create -p dcloudio/uni-preset-vue 项目名\n    ",hasDetail:!0,htmlUrl:"https://www.jianshu.com/p/92d299cbd099",tags:[{name:"进阶",color:"purple"}]},{name:"H5调试 跨域问题",answer:'\n    manifest.json 配置代理\n\n    "h5" : {\n      "devServer" : {\n          "proxy" : {\n              "/api" : {\n                  "target" : "http://172.22.10.102:80/api",\n                  "changeOrigin" : true,\n                  "pathRewrite" : {\n                      "^/api" : ""\n                  }\n              }\n          }\n      }\n  }\n\n  其它方案参考：\n  https://juejin.cn/post/6844904063855755271\n    ',tags:[{name:"进阶",color:"purple"}]},{name:"uni.request小程序无network",answer:"\n    关键词：没反应 network 网络调试\n\n    小程序请求完整的url 协议等不能缺少\n    否则会无反应 无network\n    ",tags:[{name:"疑难杂症",color:"red"}]},{name:"Vue Cli 配置 uni-ui",answer:"\n    将hello示例下components文件夹拉入新项目（准确性不定）\n    ",tags:[{name:"基础",color:"blue"}]},{name:"uniapp平台判断",answer:"\n    uni.getSystemInfoSync().platform\n    当为小程序环境时值为 devtools\n\n    文档：\n    https://uniapp.dcloud.io/api/system/info?id=getsysteminfosync\n    ",tags:[{name:"基础",color:"blue"}]},{name:"uni-ui 基本表单（Form）",answer:'\n    <template>\n      <view class="login-form">\n        <uni-forms ref="form" :value="formData" :rules="rules">\n          <uni-forms-item label="用户名" name="userName" required>\n            <uni-easyinput\n              type="text"\n              v-model="formData.userName"\n              placeholder="请输入用户名"\n            />\n          </uni-forms-item>\n            ...\n          <uni-forms-item>\n            ...\n          </uni-forms-item>\n          <button type="default" @click="handleSubmit(\'form\')">登录</button>\n        </uni-forms>\n      </view>\n    </template>\n\n    export default {\n      data() {\n        return {\n          // 表单数据\n          formData: {\n            userName: \'\',\n            ...\n          },\n          // 表单验证\n          rules: {\n            userName: {\n              rules: [\n                {\n                  required: true,\n                  errorMessage: \'请输入用户名\'\n                }\n              ]\n            },\n            ...\n          }\n        }\n      }\n    }\n    ',tags:[{name:"基础",color:"blue"}]},{name:"uni-ui 输入框（Input）",answer:'\n    <uni-easyinput\n      type="text"\n      v-model="formData.password"\n      placeholder="请输入密码"\n    />\n\n    tips:\n    1、type 为 password 时会自动隐藏密码 显示隐藏开关\n    ',tags:[{name:"基础",color:"blue"}]},{name:"uni-ui 提示框（Toast）",answer:"\n    成功框：\n    uni.showToast({\n      title: '提交成功'\n    })\n    只显示文字：\n    uni.showToast({\n      title: 'xxx',\n      icon:'none'\n    });\n    ",tags:[{name:"基础",color:"blue"}]},{name:"Error：系统错误，错误码：800059，error：iconPath=，file not found",answer:'\n    pages.json\n    配置taBar时 图片路径不能为空\n\n    ...\n    "iconPath": "",\n    ...\n\n    打包预览报错\n    ',tags:[{name:"疑难杂症",color:"red"}]},{name:"hover-class",answer:"\n    hover-class=\"css类名\"\n    :hover-class=\"条件 ? 'css类名1' : 'css类名2'\"\n    ",tags:[{name:"基础",color:"blue"}]},{name:"基本路由跳转 & 传值",answer:"\n    关键词：路由 基本路由 传值\n\n    navigateTo 可通过左上角返回\n    uni.navigateTo({\n      url: 'pages/xx/xx'\n      url: 'pages/xx/xx?val1=yy&val2=pp' （带参）\n    });\n    如果带参 在目标页面中应在 onLoad 方法中接收\n    onLoad 方法与 data methods computed 同级\n\n    onLoad: function(option) {\n      console.log(option.val1)  // yy\n      console.log(option.val2)  // pp\n    },\n\n    redirectTo\n    关闭当前页面，跳转到应用内的某个页面\n    uni.redirectTo({\n      url: 同上\n    });\n\n    reLaunch\n    关闭所有页面，打开到应用内的某个页面\n    uni.reLaunch({\n      url: 同上\n    });\n    ",tags:[{name:"基础",color:"blue"}]},{name:"动态修改页面title",answer:"\n    uni.setNavigationBarTitle({\n      title: '标题'\n    })\n    ",tags:[{name:"基础",color:"blue"}]},{name:"uniapp组件deep修改样式无效",answer:"\n    关键词：deep 深度 修改样式 样式\n\n    需要在vue中挂载属性 该属性与data、methods同级\n    options: { styleIsolation: 'shared' },\n    ",tags:[{name:"疑难杂症",color:"red"}]}]};e.a=t},fa7d:function(n,e,a){"use strict";a.d(e,"a",(function(){return t})),a.d(e,"b",(function(){return o})),a.d(e,"c",(function(){return r}));a("ed63"),a("8cf2"),a("e10e"),a("0b46"),a("6d57"),a("06a2"),a("2aa3"),a("e292");function t(n){var e=JSON.stringify(n);return JSON.parse(e)}function o(n,e){for(var a=arguments.length,t=new Array(a>2?a-2:0),o=2;o<a;o++)t[o-2]=arguments[o];var r;return function(){var a=this;if(void 0===r)return e.apply(a,t),void(r="isApplyed");clearTimeout(r),r=setTimeout((function(){e.apply(a,t)}),n)}}function r(n){n.map((function(n,e){n.key=e+1}))}}}]);